{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\ude99 1kUSD Stablecoin Protocol","text":"<p>Welcome to the 1kUSD Documentation Portal.</p> <p>This site provides: - \ud83d\udcd8 Technical specifications (<code>specs/</code>) - \u2699\ufe0f Smart contract architecture (<code>contracts/core/</code>) - \ud83e\udde0 Governance and safety modules (<code>safety/</code>) - \ud83d\udca1 Integration guides and testing notes (<code>integrations/</code>, <code>testing/</code>)</p> <p>For the full GitHub repository, visit: \ud83d\udc49 NeaBouli/1kUSD</p>"},{"location":"ANALYSIS_KASPA_STABLECOINS/","title":"1kUSD \u2013 The Subtle Beginning of a Decentralized Revolution on Kaspa","text":"<p>In the world of cryptocurrencies, stablecoins have long become a fundamental pillar \u2014 the bridge between traditional finance and the volatile crypto economy, between trust and technical innovation. Yet while Ethereum, Solana, and Avalanche already host a multitude of stable currencies, the Kaspa blockchain has so far remained without a truly decentralized stablecoin project. That may be about to change \u2014 with an ambitious open-source initiative that demands attention: 1kUSD.</p> <p>Published under the GitHub account NeaBouli/1kUSD, the project defines itself not as a classic token launch, but as a complete framework for a new generation of stablecoins \u2014 decentralized, collateralized, and automated. According to its whitepaper, it aims to maintain a 1:1 peg to the US dollar through on-chain reserves and algorithmic stability mechanisms. Beneath the surface, however, lies far more than another stable asset: 1kUSD is conceived as a modular ecosystem designed for operation both on conventional EVM chains and, in the long term, within the Kaspa infrastructure itself \u2014 through the planned Layer-2 network known as Kasplex.</p> <p>Even a glance at the repository structure reveals the project\u2019s depth. Directories such as <code>contracts/</code>, <code>oracles/</code>, <code>treasury/</code>, <code>dao/</code>, and <code>safety/</code> show an architecture that was built with stability, transparency, and governance in mind from day one. At its core stand two key modules: the CollateralVault, serving as the vault for deposited reserves, and the Peg Stability Module (PSM), which automatically regulates the equilibrium price between the stablecoin and its backing assets. This system is complemented by an Oracle Aggregator for price feeds, a Safety Automata layer for emergency mechanisms, and a DAO-based governance model that decentralizes control over key parameters and the treasury.</p> <p>What makes the project particularly remarkable is its clear focus on future compatibility. While many stablecoins are confined to a single network, 1kUSD sees its evolution as an incremental process: first deploying on an EVM-compatible chain, then integrating Wrapped Kaspa assets through bridges like KatBridge or KasBridge, and eventually migrating fully to Kasplex or a potential smart-contract layer on Kaspa L1. This path is technically demanding but strategically sound \u2014 it allows the protocol to be tested, audited, and refined before merging into Kaspa\u2019s main network.</p> <p>The potential for Kaspa is enormous. A decentralized stablecoin would elevate its ecosystem to a new level: DeFi applications, decentralized exchanges, lending platforms, and payment systems could all build upon a stable currency rooted directly in Kaspa\u2019s universe. Without it, Kaspa risks long-term dependence on external bridges or centralized intermediaries \u2014 a vulnerability that 1kUSD aims to eliminate.</p> <p>Of course, the project remains in its early stages. There are no public releases yet, no mainnet deployments, and no proof-of-reserves available. Much of it exists as architectural groundwork and specification \u2014 but that is precisely what gives it promise. 1kUSD is not a hastily launched token, but an invitation to the developer community to collectively define a decentralized standard. The code is published under the GPL-3.0 license, open for forks, contributions, and enhancements.</p> <p>A look at the documentation reveals not only technical precision but conceptual rigor. Alongside its whitepaper and architectural diagrams, the project includes specifications for price-stabilization formulas, safety procedures, and governance operations. Particularly noteworthy is the integration of the Safety Automata \u2014 a mechanism that automatically triggers protective modes under extreme market conditions, pausing minting or enforcing reserve rebalancing. Such built-in safeguards are rarely found in early-stage stablecoin frameworks.</p> <p>Still, the challenges ahead are substantial. Migration to Kaspa or Kasplex will break new technical ground; integrating oracles and cross-chain bridges carries inherent risk; and adoption will hinge on community trust and liquidity. Moreover, the regulatory landscape for stablecoins is tightening globally \u2014 a factor that no project in this domain can ignore.</p> <p>Despite these hurdles, 1kUSD exudes substance and intention. It feels less like an experiment and more like a foundation \u2014 a protocol capable of giving Kaspa the missing pillar of economic stability. Those familiar with Kaspa\u2019s ethos recognize its strengths: efficiency, transparency, and consistency. A stablecoin like 1kUSD would extend these qualities into the realm of financial equilibrium.</p> <p>One senses a philosophical alignment between Kaspa\u2019s design principles and 1kUSD\u2019s architecture: decentralized, verifiable, and resilient, without a single point of failure. Whether 1kUSD will become the stablecoin that truly stabilizes Kaspa remains to be seen \u2014 but it is undoubtedly the first to lay a credible technical foundation for that vision.</p> <p>Authored by the 1kUSD Development Collective \u2014 Open-Source Documentation Initiative 2025</p>"},{"location":"API_SPECS/","title":"API &amp; Interface Catalog (EN)","text":"<p>This file enumerates \u2014 at a high level \u2014 the planned interfaces for 1kUSD:</p>"},{"location":"API_SPECS/#on-chain-contracts","title":"On-Chain (contracts)","text":"<ul> <li>Events (Token, Vault, PSM, Oracle, Safety, DAO, Treasury, Bridge Anchor)</li> <li>Roles &amp; capabilities (ownerless or Timelock-governed)</li> <li>Invariants: supply \u2264 provable reserves, pause-aware operations</li> </ul>"},{"location":"API_SPECS/#off-chain","title":"Off-Chain","text":"<ul> <li>Indexer (REST/GraphQL): proof-of-reserves, peg drift, PSM flows, exposure, fees</li> <li>Monitoring: Prometheus/OTel metrics &amp; alert conditions</li> <li>Governance Ops: proposal lifecycle transparency (read-only), timelock state</li> </ul>"},{"location":"API_SPECS/#client-facing","title":"Client-Facing","text":"<ul> <li>JSON-RPC/WebSocket: standard node/provider methods (read-only and subscriptions)</li> <li>SDK method families (Tx build/sign/broadcast; event decoding)</li> </ul> <p>Note: Detailed schemas will be produced by interface tasks (no code here).</p>"},{"location":"ARCHITECTURE/","title":"1kUSD \u2014 Technical Architecture (Overview, EN)","text":"<p>Core Modules - Token: ERC-20 compatible, mint/burn restricted to protocol modules. - CollateralVault: Holds stablecoins (USDT/USDC/DAI); withdrawals only via protocol paths. - AutoConverter: Best-execution routing from volatile assets to stablecoins; outputs to Vault. - PSM (Peg-Stability Module): 1:1 swap 1kUSD &lt;-&gt; stablecoins with minimal fee and caps. - OracleAggregator: Multi-feed median with deviation/staleness checks. - Safety-Automata: Central policy enforcement (pause/resume, caps, rate limits); no asset custody. - DAO/Timelock: Parameter &amp; upgrade governance via time-delayed execution. - Treasury: Fee sink and governed spending. - Bridge Anchor (prep): Message/proof spec towards Kasplex/Kaspa.</p> <p>Off-Chain - Indexer (REST/GraphQL): Proof-of-reserves, peg drift, PSM volumes, exposure caps, pause states. - Monitoring/Telemetry: Metrics &amp; alerts for peg integrity, oracle health, circuit breakers. - CI/CD &amp; Security: Tests (unit/integration/fuzz), audits, signed releases.</p> <p>Clients - SDKs (TS/Go/Rust/Python), reference dApp/Explorer.</p> <p>Detailed specifications will be added through dedicated developer tasks (interfaces first, then implementation).</p>"},{"location":"ARCHITEKTUR/","title":"1kUSD \u2013 Technische Architektur (Kurz\u00fcberblick)","text":"<p>Module: Token, CollateralVault, AutoConverter, PSM, OracleAggregator, Safety-Automata, DAO/Timelock, Treasury, Bridge-Anker (Vorbereitung) \u2014 Detailausarbeitung folgt durch DEV-Tasks.</p>"},{"location":"BOOTSTRAP_QUICKSTART/","title":"Bootstrap Quickstart","text":"<p>Localnet Bootstrap Quickstart</p> <p>Start local chain</p> <p>./ops/localnet/start-anvil.sh</p> <p>Compile</p> <p>forge build (or) npx hardhat compile</p> <p>Seed &amp; addresses</p> <p>./ops/localnet/seed-accounts.sh</p> <p>./ops/localnet/deploy-skeleton.sh</p> <p>node scripts/emit-env-from-addresses.ts ops/addresses/address-book.local.json 31337 &gt; .env.addresses</p> <p>Stop local chain</p> <p>./ops/localnet/stop-anvil.sh</p>"},{"location":"BUILD_TOOLING/","title":"Build/Tooling \u2014 Skeleton","text":"<p>Status: No tests yet. Contracts compile-able via Foundry oder Hardhat.</p>"},{"location":"BUILD_TOOLING/#foundry","title":"Foundry","text":"<ul> <li>Config: <code>foundry/foundry.toml</code></li> <li>Compile: <code>forge build</code> (requires Foundry installed)</li> <li>Format: <code>forge fmt</code></li> </ul>"},{"location":"BUILD_TOOLING/#hardhat-typescript","title":"Hardhat (TypeScript)","text":"<ul> <li>Config: <code>hardhat.config.ts</code></li> <li>Install dev deps locally (optional): <code>npm i</code></li> <li>Compile: <code>npm run hh:compile</code></li> <li>Local node: <code>npm run hh:node</code></li> </ul>"},{"location":"BUILD_TOOLING/#notes","title":"Notes","text":"<ul> <li>Solidity version pinned to 0.8.24 to match interface stubs.</li> <li>No deployments/scripts except placeholder <code>foundry/script/Deploy.s.sol</code>.</li> <li>CI integration will stay placeholder until code exists.</li> </ul>"},{"location":"BUILD_TOOLING/#buildci-sanity","title":"Build/CI Sanity","text":"<ul> <li>GitHub Actions: <code>build.yml</code> compiles contracts via Hardhat with Node 20.</li> <li>Foundry <code>fmt</code> is currently a placeholder workflow; can be upgraded to install Foundry later.</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#2025-10-12-dev1-docs-lead","title":"2025-10-12 \u2014 DEV1 (Docs Lead)","text":"<ul> <li>Added bilingual whitepaper: <code>docs/whitepaper/WHITEPAPER_1kUSD_DE.md</code> and <code>..._EN.md</code></li> <li>Updated docs index and aligned architecture/API references</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev2-repo-governance","title":"2025-10-12 \u2014 DEV2 (Repo Governance)","text":"<ul> <li>Added <code>CONTRIBUTING.md</code> (EOF workflow, CI gates, PR process)</li> <li>Added <code>CODEOWNERS</code> (placeholder)</li> <li>Added <code>.editorconfig</code></li> <li>Added <code>SECURITY.md</code> (private reporting via GitHub Advisories)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev3-cicd","title":"2025-10-12 \u2014 DEV3 (CI/CD)","text":"<ul> <li>Replaced <code>.github/workflows/ci.yml</code> with a functional minimal pipeline (bootstrap/lint/test/reports placeholders)</li> <li>Added <code>reports/README.md</code></li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev4-interfacesspecs","title":"2025-10-12 \u2014 DEV4 (Interfaces/Specs)","text":"<ul> <li>Added <code>interfaces/ONCHAIN_EVENTS.md</code> (event catalog for all modules)</li> <li>Added <code>interfaces/RPC_API.md</code> (public JSON-RPC/WebSocket spec)</li> <li>Added <code>interfaces/INDEXER_API.md</code> (REST/GraphQL read-only spec)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev5-psm-spec-invariants","title":"2025-10-12 \u2014 DEV5 (PSM Spec &amp; Invariants)","text":"<ul> <li>Added <code>contracts/specs/PSM_SPEC.md</code> (parameters, fees, caps, rate limits, guards, state machine)</li> <li>Added <code>contracts/specs/INVARIANTS.md</code> (system-wide invariants &amp; safety properties)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev6-safety-governance-hooks-specs","title":"2025-10-12 \u2014 DEV6 (Safety &amp; Governance Hooks Specs)","text":"<ul> <li>Added <code>contracts/specs/SAFETY_AUTOMATA_SPEC.md</code> (policies, state machine, guards, guardian sunset)</li> <li>Added <code>contracts/specs/GOVERNANCE_HOOKS_SPEC.md</code> (DAO/Timelock executor, parameter flows)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev7-vault-por-specs","title":"2025-10-12 \u2014 DEV7 (Vault &amp; PoR Specs)","text":"<ul> <li>Added <code>contracts/specs/COLLATERAL_VAULT_SPEC.md</code> (ingress/egress, caps, decimals, errors, events)</li> <li>Added <code>contracts/specs/PROOF_OF_RESERVES_SPEC.md</code> (views, reconciliation, finality, telemetry)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev8-oracle-feeds-specs","title":"2025-10-12 \u2014 DEV8 (Oracle &amp; Feeds Specs)","text":"<ul> <li>Added <code>contracts/specs/ORACLE_AGGREGATOR_SPEC.md</code> (aggregation, guards, finality)</li> <li>Added <code>contracts/specs/PRICE_FEEDS_SPEC.md</code> (adapter requirements for Chainlink/Pyth/DEX-TWAP)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev9-autoconverter-routing-specs","title":"2025-10-12 \u2014 DEV9 (AutoConverter &amp; Routing Specs)","text":"<ul> <li>Added <code>contracts/specs/AUTOCONVERTER_SPEC.md</code> (routing, slippage, oracle sanity, safety)</li> <li>Added <code>contracts/specs/ROUTING_ADAPTERS_SPEC.md</code> (adapter interface &amp; safety requirements)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev10-daotimelock-treasury-params-specs","title":"2025-10-12 \u2014 DEV10 (DAO/Timelock &amp; Treasury &amp; Params Specs)","text":"<ul> <li>Added <code>contracts/specs/DAO_TIMELOCK_SPEC.md</code> (roles, lifecycle, delays)</li> <li>Added <code>contracts/specs/TREASURY_SPEC.md</code> (fee accounting, spend path via Vault)</li> <li>Added <code>contracts/specs/PARAMETER_REGISTRY_SPEC.md</code> (canonical parameter map &amp; events)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev11-clientsdk-specs","title":"2025-10-12 \u2014 DEV11 (Client/SDK Specs)","text":"<ul> <li>Added TS/Go/Rust/Python SDK specs under <code>clients/specs/</code></li> <li>Added common error taxonomy, event decoding, and tx build flows</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev12-reference-dappexplorer-specs","title":"2025-10-12 \u2014 DEV12 (Reference dApp/Explorer Specs)","text":"<ul> <li>Added reference app specs: REF_DAPP_SPEC, UX_FLOWS, API_CONTRACTS, ACCESSIBILITY_I18N</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev13-testplan-ci-extensions","title":"2025-10-12 \u2014 DEV13 (Testplan &amp; CI Extensions)","text":"<ul> <li>Added test specs: TESTPLAN, FORMAL_INVARIANTS_MAP, SECURITY_ANALYSIS</li> <li>Added CI reports schema and expanded CI skeleton with artifacts</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev14-psm-specs","title":"2025-10-12 \u2014 DEV14 (PSM Specs)","text":"<ul> <li>Added <code>contracts/specs/PSM_SPEC.md</code> (swap flows, fees, guards, events, errors)</li> <li>Added <code>contracts/specs/RATE_LIMITS_SPEC.md</code> (sliding window model shared by modules)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev15-token-access-control-specs","title":"2025-10-12 \u2014 DEV15 (Token &amp; Access Control Specs)","text":"<ul> <li>Added <code>contracts/specs/TOKEN_SPEC.md</code> (mint/burn gates, permit, pause interop)</li> <li>Added <code>contracts/specs/ACCESS_CONTROL_SPEC.md</code> (roles, governance wiring, enforcement)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev16-deployment-environments-specs","title":"2025-10-12 \u2014 DEV16 (Deployment &amp; Environments Specs)","text":"<ul> <li>Added ops specs: DEPLOYMENT_ENVIRONMENTS, RELEASE_PROCESS, SECRETS_HANDLING, EMERGENCY_PLAYBOOKS</li> <li>Added placeholder address registries under ops/config/</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev17-indexer-data-model-specs","title":"2025-10-12 \u2014 DEV17 (Indexer &amp; Data Model Specs)","text":"<ul> <li>Added indexer specs: ENTITY_MODEL, INGESTION_PIPELINE, API_SPEC, SCHEMA</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev18-threat-modeling-risk-register","title":"2025-10-12 \u2014 DEV18 (Threat Modeling &amp; Risk Register)","text":"<ul> <li>Added security specs: THREAT_MODEL, RISK_REGISTER, ATTACK_TREES, MITIGATIONS_MAP</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev19-telemetry-monitoring-specs","title":"2025-10-12 \u2014 DEV19 (Telemetry &amp; Monitoring Specs)","text":"<ul> <li>Added telemetry specs: METRICS_SPEC, ALERTS_SLOS_SPEC, HEALTH_ENDPOINTS_SPEC</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev20-integration-blueprints","title":"2025-10-12 \u2014 DEV20 (Integration Blueprints)","text":"<ul> <li>Added integration specs: WALLETS_PAYMENTS_SPEC, BRIDGES_CEX_LISTINGS_SPEC, PARTNER_APIS_ADAPTERS_SPEC</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev21-gas-fee-accounting-specs","title":"2025-10-12 \u2014 DEV21 (Gas &amp; Fee Accounting Specs)","text":"<ul> <li>Added GAS_POLICY_SPEC (targets, patterns, CI gates)</li> <li>Added FEE_ACCOUNTING_SPEC (formulas, events, edge cases)</li> <li>Added MATH_ROUNDING_RULES (mulDiv, floor policy, quoting)</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev22-bridgingmigration-roadmap","title":"2025-10-12 \u2014 DEV22 (Bridging/Migration Roadmap)","text":"<ul> <li>Added bridging specs: MIGRATION_ROADMAP, BRIDGE_ARCH_OPTIONS, COMPAT_LAYER_SPEC</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev23-legalcompliance-notes","title":"2025-10-12 \u2014 DEV23 (Legal/Compliance Notes)","text":"<ul> <li>Added informational legal docs: LEGAL_STANCE, JURISDICTIONS_CHECKLIST, DISCLOSURES</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev24-reference-dapp-specs","title":"2025-10-12 \u2014 DEV24 (Reference dApp Specs)","text":"<ul> <li>Added dApp specs: REFERENCE_DAPP_UX, COMPONENTS_SPEC, STATUS_API_WIRING</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev25-operational-playbooks-v1","title":"2025-10-12 \u2014 DEV25 (Operational Playbooks v1)","text":"<ul> <li>Added playbooks: RELEASE_REHEARSAL, PARAM_CHANGE_RUNBOOK, INCIDENT_DRY_RUN</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev25-operational-playbooks-v1_1","title":"2025-10-12 \u2014 DEV25 (Operational Playbooks v1)","text":"<ul> <li>Added playbooks: RELEASE_REHEARSAL, PARAM_CHANGE_RUNBOOK, INCIDENT_DRY_RUN</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev26-security-contest-prep","title":"2025-10-12 \u2014 DEV26 (Security Contest Prep)","text":"<ul> <li>Added contest docs: CONTEST_SCOPE, RULES, FINDINGS_TEMPLATE, PAYOUT_MAP</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev27-release-v0-meta-checklist-freeze-gates","title":"2025-10-12 \u2014 DEV27 (Release v0 Meta-Checklist &amp; Freeze Gates)","text":"<ul> <li>Added release specs: RELEASE_CANDIDATE_CRITERIA, FREEZE_GATES_CHECKLIST, SIGNOFFS_EVIDENCE</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev28-spec-consistency","title":"2025-10-12 \u2014 DEV28 (Spec Consistency)","text":"<ul> <li>Added central docs/INDEX.md with cross-links</li> <li>Appended README pointer to INDEX.md</li> <li>Added placeholder link-check workflow and config</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev29-bootstrap-code-stubs","title":"2025-10-12 \u2014 DEV29 (Bootstrap Code Stubs)","text":"<ul> <li>Added Solidity interfaces: I1kUSD, IPSM, IVault, IOracleAggregator, ISafetyAutomata, IParameterRegistry</li> <li>Added empty contract stubs: OneKUSD, PegStabilityModule, CollateralVault, OracleAggregator, SafetyAutomata, DAOTimelock</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev30-buildtooling-skeleton","title":"2025-10-12 \u2014 DEV30 (Build/Tooling Skeleton)","text":"<ul> <li>Added Foundry skeleton (<code>foundry/foundry.toml</code>, script stub, remappings)</li> <li>Added Hardhat skeleton (package.json, tsconfig.json, hardhat.config.ts, .npmrc)</li> <li>Added BUILD_TOOLING.md and placeholder CI build workflow</li> </ul>"},{"location":"CHANGELOG/#2025-10-12-dev31-coding-kickoff-token-minimal","title":"2025-10-12 \u2014 DEV31 (Coding Kickoff: Token minimal)","text":"<ul> <li>Implemented minimal OneKUSD token: ERC-20 core, gated mint/burn, pause affects only mint/burn, admin roles (to be Timelock later), custom errors</li> <li>Excludes permit (EIP-2612) for now, per TOKEN_SPEC optional</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev32-psm-minimal-skeleton","title":"2025-10-13 \u2014 DEV32 (PSM minimal skeleton)","text":"<ul> <li>Added minimal PegStabilityModule: admin/registry wiring, pause/deadline guards, IPSM signatures, stub quotes/swaps (NOT_IMPLEMENTED)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev33-vault-minimal-skeleton","title":"2025-10-13 \u2014 DEV33 (Vault minimal skeleton)","text":"<ul> <li>Added CollateralVault minimal skeleton: admin/registry wiring, pause guard, supported-assets toggle, IVault signatures; deposit/withdraw stubs (NOT_IMPLEMENTED)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev34-oracleaggregator-minimal-skeleton","title":"2025-10-13 \u2014 DEV34 (OracleAggregator minimal skeleton)","text":"<ul> <li>Added OracleAggregator minimal skeleton: admin/registry wiring, pause guard, OracleUpdated event, IOracleAggregator stub (no pricing logic)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev35-safetyautomata-minimal-skeleton","title":"2025-10-13 \u2014 DEV35 (SafetyAutomata minimal skeleton)","text":"<ul> <li>Added SafetyAutomata minimal skeleton: admin/registry wiring, pause/unpause events, read-only interface stubs (no caps/rate-limit logic)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev36-dao-timelock-minimal-skeleton","title":"2025-10-13 \u2014 DEV36 (DAO Timelock minimal skeleton)","text":"<ul> <li>Added minimal DAOTimelock: admin wiring, minDelay placeholder, queue/cancel/execute events; execute() is a stub (NOT_IMPLEMENTED)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev37-parameterregistry-minimal-skeleton","title":"2025-10-13 \u2014 DEV37 (ParameterRegistry minimal skeleton)","text":"<ul> <li>Added ParameterRegistry: admin setUint/setAddress/setBool; read-only getters per interface; no validations yet</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev38-wire-up-pass-v0","title":"2025-10-13 \u2014 DEV38 (Wire-up Pass v0)","text":"<ul> <li>Added ops/config addresses templates (template, staging, testnet, mainnet)</li> <li>Added Admin/Wiring notes</li> <li>Updated README to reference addresses templates</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev39-build-sanity-ci","title":"2025-10-13 \u2014 DEV39 (Build sanity CI)","text":"<ul> <li>Added GitHub Actions: hardhat compile with artifact upload; Foundry fmt placeholder</li> <li>Updated BUILD_TOOLING.md with CI notes</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev40-psm-minimal-whitelist-dummy-quotes","title":"2025-10-13 \u2014 DEV40 (PSM minimal+: whitelist &amp; dummy quotes)","text":"<ul> <li>Extended PSM with supported-token whitelist and pass-through quotes (gross=amountIn, fee=0, net=amountIn)</li> <li>Swaps remain NOT_IMPLEMENTED; no fund movements yet</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev41-vault-minimal","title":"2025-10-13 \u2014 DEV41 (Vault minimal+)","text":"<ul> <li>CollateralVault: added batch getter <code>areAssetsSupported(address[])</code>; <code>balanceOf</code> remains dummy; no transfer/accounting logic yet</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev42-oracle-minimal-admin-mock-prices","title":"2025-10-13 \u2014 DEV42 (Oracle minimal+: admin mock prices)","text":"<ul> <li>OracleAggregator: added admin <code>setPriceMock</code> and mock storage; <code>getPrice</code> serves mock values (dev/staging only)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev43-token-minimal-eip-2612","title":"2025-10-13 \u2014 DEV43 (Token minimal+: EIP-2612)","text":"<ul> <li>Added IERC2612 interface and implemented <code>permit</code> in OneKUSD</li> <li>Domain separator is chainId-aware; <code>nonces</code> tracked per owner</li> <li>No changes to transfer logic; pause still gates only mint/burn</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev44-parameter-keys-staging-params","title":"2025-10-13 \u2014 DEV44 (Parameter keys &amp; staging params)","text":"<ul> <li>Added docs/PARAMETER_KEYS.md (canonical bytes32 keys reference)</li> <li>Added ops/config/params.staging.json with example values for dev/staging</li> <li>Updated README with parameters section</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev45-deploy-placeholders","title":"2025-10-13 \u2014 DEV45 (Deploy placeholders)","text":"<ul> <li>Added Foundry placeholder deploy script (encodes ctor args; no broadcast)</li> <li>Added Hardhat placeholder deploy script (reads config; prints wiring; no deploy)</li> <li>Added ops/specs/DEPLOY_PLACEHOLDERS.md</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev46-docs-hardening","title":"2025-10-13 \u2014 DEV46 (Docs hardening)","text":"<ul> <li>Added JSON Schemas for addresses and params; embedded <code>$schema</code> in config JSONs</li> <li>Added docs/JSON_VALIDATION.md and updated README with validation notes</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev47-safety-docs-pass","title":"2025-10-13 \u2014 DEV47 (Safety docs pass)","text":"<ul> <li>Added Guardian Sunset checklist (docs/SAFETY_GUARDIAN_CHECKLIST.md)</li> <li>Added ops runbooks: EMERGENCY_DRILLS.md and INCIDENT_TEMPLATE.md</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev48-dapp-scaffolding-docs","title":"2025-10-13 \u2014 DEV48 (dApp scaffolding docs)","text":"<ul> <li>Added docs/dapp/README.md and ROUTES.md (information architecture + routes)</li> <li>Added apps/dapp placeholders (public/brand.svg, src/README, folder marker)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev49-sdk-wiring-guide","title":"2025-10-13 \u2014 DEV49 (SDK wiring guide)","text":"<ul> <li>Added SDK wiring guide and TS examples (addresses loader, params+RPC)</li> <li>Updated README; added clients/specs overview</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev50-psm-quote-semantics","title":"2025-10-13 \u2014 DEV50 (PSM quote semantics)","text":"<ul> <li>Added docs/PSM_QUOTE_SEMANTICS.md (decimals normalization, fees, rounding, invariants, examples)</li> <li>Updated README with cross-reference</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev51-vault-accounting-plan","title":"2025-10-13 \u2014 DEV51 (Vault accounting plan)","text":"<ul> <li>Added docs/VAULT_ACCOUNTING_PLAN.md (math, caps, fees, decimals policy, invariants)</li> <li>Added docs/NOTES_VAULT_ACCOUNTING.md (reviewer notes)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev52-psm-swap-execution-plan","title":"2025-10-13 \u2014 DEV52 (PSM swap execution plan)","text":"<ul> <li>Added docs/PSM_SWAP_EXECUTION_PLAN.md (CEI, guards, vault interactions, fees, events)</li> <li>Added docs/NOTES_PSM_EXECUTION.md (reviewer notes)</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev53-safety-docs-set","title":"2025-10-13 \u2014 DEV53 (Safety docs set)","text":"<ul> <li>Added Safety Pause Matrix, Module IDs, Error Catalog, Guardian Sunset Hooks</li> <li>Updated README with cross-links</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-patch-psm-swap-execution-plan-language","title":"2025-10-13 \u2014 Patch: PSM swap execution plan language","text":"<ul> <li>Rewrote docs/PSM_SWAP_EXECUTION_PLAN.md in English (removed German fragments).</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev54-interfaces-polish","title":"2025-10-13 \u2014 DEV54 (interfaces polish)","text":"<ul> <li>Added minimal Solidity interfaces: IPSM, IVault, IOracleAggregator, IParameterRegistry, ISafetyAutomata, I1kUSD (+ IERC2612 if missing)</li> <li>Added interfaces README overview</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev55-parameter-keys-canon","title":"2025-10-13 \u2014 DEV55 (parameter keys canon)","text":"<ul> <li>Added canonical parameter keys doc with composite derivation rules</li> <li>Added params JSON schema &amp; template</li> <li>Added TS SDK helpers (key/compositeKey)</li> <li>Updated README with cross-links</li> </ul> <p>2025-10-13 \u2014 DEV56 (deployment skeletons)</p> <p>Added env templates (.env.example, staging/testnet samples)</p> <p>Added Foundry skeleton (foundry.toml, compile-only test)</p> <p>Added Hardhat skeleton (config + TS scripts), address template emitter</p> <p>Added deploy CI skeleton and README quickstart</p> <p>2025-10-13 \u2014 DEV57 (events &amp; abi)</p> <p>Added canonical event ABIs: PSM, Vault, Token (JSON)</p> <p>Added indexer notes for topics, reconciliation, finality, and edge cases</p> <p>2025-10-13 \u2014 DEV58 (sdk event decoders)</p> <p>Added TS decoders for PSM/Vault/Token events (clients/sdk/events.ts)</p> <p>Added example (clients/examples/decode-events.ts) and docs</p> <p>2025-10-13 \u2014 DEV59 (indexer schemas)</p> <p>Added JSON schemas for swaps, fees, and vault snapshots</p> <p>Added sample records and documentation</p>"},{"location":"CHANGELOG/#2025-10-13-dev60-psm-quote-math","title":"2025-10-13 \u2014 DEV60 (psm quote math)","text":"<ul> <li>Added normative math for PSM quotes (rounding/decimals/fee order)</li> <li>Added machine-readable test vectors for USDC/WETH cases</li> <li>Added usage notes for unit/invariant tests</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev61-vault-accounting-edges","title":"2025-10-13 \u2014 DEV61 (vault accounting edges)","text":"<ul> <li>Added vault accounting edge cases doc (FoT, decimals, caps)</li> <li>Added machine-readable vectors for FoT/cap boundary cases</li> <li>Added vault test guide with mock FoT hints</li> </ul>"},{"location":"CHANGELOG/#2025-10-13-dev62-oracle-aggregation-guards","title":"2025-10-13 \u2014 DEV62 (oracle aggregation guards)","text":"<ul> <li>Added normative doc for multi-source aggregation (median/trimmed-mean), staleness and deviation guards</li> <li>Added machine-readable vectors for healthy/stale/outlier/trimmed cases</li> <li>Added oracle test guide</li> </ul> <p>2025-10-13 \u2014 DEV63 (safety rate-limiter)</p> <p>Added sliding-window rate-limiter spec (window/maxAmount, scopes, buckets)</p> <p>Added machine-readable vectors and a focused test guide</p> <p>2025-10-13 \u2014 DEV64 (governance wiring)</p> <p>Added governance param writes flow (Timelock -&gt; ParameterRegistry)</p> <p>Added proposal JSON schema and sample</p> <p>Added calldata composer script (TS)</p> <p>Added Guardian sunset rehearsal runbook</p> <p>Updated README with governance links</p> <p>2025-10-13 \u2014 DEV65 (token permit eip-2612)</p> <p>Finalized OneKUSD EIP-2612 Permit spec (domain, struct, digest, rules)</p> <p>Added machine-readable vectors and TS helper to build/sign permits</p> <p>Added test guide for domain, replay, expiry, and ECDSA checks</p> <p>2025-10-13 \u2014 DEV66 (invariants bundle)</p> <p>Added executable mapping from formal invariants to concrete checks</p> <p>Added consolidated invariants suite plan and default config JSON</p> <p>Added harness notes for PSM/Vault/Governance invariant runs</p> <p>2025-10-13 \u2014 DEV67 (configs &amp; address book)</p> <p>Added per-chain deploy config schema + local/testnet/mainnet samples</p> <p>Added canonical address book schema + sample</p> <p>Added JSON validator and .env emitter scripts</p> <p>Updated README with usage instructions</p> <p>2025-10-13 \u2014 DEV68 (localnet/staging bootstraps)</p> <p>Added localnet scripts (start/stop/seed/deploy-skeleton)</p> <p>Added staging bootstrap runbook (Base Sepolia example)</p> <p>Added bootstrap quickstart and README links</p> <p>2025-10-13 \u2014 DEV69 (ci gates)</p> <p>Added CI gates doc with red/green criteria</p> <p>Added collate script (node) to enforce gates from JSON artifacts</p> <p>Added placeholders generator and updated CI workflow to wire jobs</p> <p>2025-10-13 \u2014 DEV70 (security pre-audit pack)</p> <p>Added pre-audit README and formal threat model</p> <p>Added static-analysis baseline config/args and generator script</p> <p>Added submission manifest and bundle script (ZIP)</p> <p>2025-10-13 \u2014 DEV71 (sdk wire-up)</p> <p>Added minimal TS SDK with address book helpers, permit helpers, oracle aggregation helper</p> <p>Added examples wiring vectors (permit/oracle)</p> <p>Updated README with SDK usage</p> <p>2025-10-13 \u2014 DEV72 (indexer read models)</p> <p>Added canonical read models schema (blocks, tokenSupply, vaultBalances, psmSwaps, events)</p> <p>Added event decode table mapping (PSM/Vault/Token)</p> <p>Added sample queries (REST/GraphQL) and a sample dataset</p> <p>Updated README with Indexer section</p> <p>2025-10-13 \u2014 DEV73 (psm math)</p> <p>Added canonical PSM quote formulas and rounding rules (docs)</p> <p>Added quote JSON vectors and TS evaluator script</p> <p>README updated with PSM Math references</p> <p>2025-10-13 \u2014 DEV74 (vault math)</p> <p>Added Vault accounting spec (received-based deposit, pending fees)</p> <p>Added fee accrual policy doc</p> <p>Added FoT/decimals vectors and TS evaluator script</p> <p>Updated README with Vault section</p> <p>2025-10-13 \u2014 DEV75 (safety guards)</p> <p>Added Safety guards test plan</p> <p>Added rate-limit vectors and evaluator (sliding window)</p> <p>Added pause/resume + guardian sunset vectors and evaluator</p> <p>README updated with Safety section</p> <p>2025-10-13 \u2014 DEV76 (psm interface finalization)</p> <p>Added finalized IPSM interface (quotes + swaps, errors/events)</p> <p>Added normative revert reasons catalog</p> <p>Added event ABI lock file and checker script</p> <p>README updated with PSM Interface section</p> <p>2025-10-13 \u2014 DEV77 (token finalize)</p> <p>Added IOneKUSD (ERC20 + EIP-2612 + gated mint/burn + pause)</p> <p>Added pause semantics doc (mint/burn only; transfers unaffected)</p> <p>Added event ABI lock for OneKUSD</p> <p>Added permit vectors JSON</p> <p>README updated with Token section</p> <p>2025-10-13 \u2014 DEV78 (collateral registry &amp; metadata)</p> <p>Added ICollateralRegistry interface</p> <p>Added asset metadata JSON schema + samples</p> <p>Added collateral registry spec and README section</p> <p>2025-10-13 \u2014 DEV79 (parameter registry finalize)</p> <p>Added final docs for Parameter Registry and Keys Catalog</p> <p>Added JSON schema and sample vectors for parameters</p> <p>Added JSON validator script (AJV) and README wiring</p> <p>2025-10-13 \u2014 DEV80 (governance ops)</p> <p>Added governance proposal JSON schema and example proposals</p> <p>Added queue/execute helper scripts (placeholder) and ops doc</p> <p>README updated with Governance Ops section</p> <p>2025-10-13 \u2014 DEV81 (oracle adapters)</p> <p>Added adapter schema (chainlink/pyth/dex_twap)</p> <p>Added mainnet catalog and sample adapter JSONs</p> <p>Added validator script and README section</p> <p>2025-10-13 \u2014 DEV82 (autoconverter router)</p> <p>Added router policy doc and JSON schema</p> <p>Added sample routes JSON</p> <p>Added evaluator script to rank policy-compliant routes</p> <p>README section for AutoConverter Router</p> <p>2025-10-13 \u2014 DEV83 (psm quote/exec alignment)</p> <p>Added executable invariants doc for quote vs exec</p> <p>Added cross-check script producing JSON and text reports</p> <p>README wired with usage instructions</p> <p>2025-10-13 \u2014 DEV84 (indexing/telemetry)</p> <p>Added indexing/telemetry spec (finality, reorgs, DTO map)</p> <p>Added JSON schemas: event DTO, PoR rollup, health</p> <p>Added validators/checkers and sample vectors</p> <p>README wired; reports folder outputs</p> <p>2025-10-13 \u2014 DEV85 (dex/amm integration)</p> <p>Added minimal ABI locks for Uniswap V2/V3 pools</p> <p>Added routing hints schema and sample JSON</p> <p>Added price sanity vectors and checker script</p> <p>README updated with DEX/AMM Integration section</p> <p>2025-10-13 \u2014 DEV86 (security checklists &amp; CI gate)</p> <p>Added pre-deploy, post-deploy, and incident-response checklists</p> <p>Added CI security gate documentation and minimal workflow</p> <p>README updated with Security section</p> <p>2025-10-13 \u2014 DEV87 (release/versioning)</p> <p>Added SemVer bump script and GitHub Release workflow (tag-triggered)</p> <p>Added release notes template and renderers (changelog-section, release-notes)</p> <p>README wired with release usage</p>"},{"location":"CI_GATES/","title":"CI GATES","text":"<p>CI Gates \u2014 Red/Green Criteria (v1)</p> <p>Status: Docs. Language: EN.</p> <p>Jobs &amp; Pass Criteria</p> <p>lint</p> <p>Pass: exit 0 (placeholder now).</p> <p>compile</p> <p>Pass: toolchain compile succeeds (forge or hardhat).</p> <p>unit</p> <p>Pass: unit.json present; failed==0.</p> <p>invariants</p> <p>Pass: invariants.json present; for all entries violations==0.</p> <p>static-analysis</p> <p>Pass: slither.json + mythril.json present; no findings with severity in {CRITICAL, HIGH}.</p> <p>gas</p> <p>Pass: gas.json present; file parse ok (no threshold enforced yet).</p> <p>collate (summary)</p> <p>Aggregates above into security-findings.json and ci-summary.json.</p> <p>Overall pass: all upstream jobs green + summary.ok=true.</p> <p>Artifacts</p> <p>unit.json, invariants.json, slither.json, mythril.json, gas.json, security-findings.json, ci-summary.json</p> <p>Notes</p> <p>Placeholders emit minimal JSON so pipeline stays green until tests land.</p> <p>Tighten thresholds as suites are implemented.</p>"},{"location":"CI_SECURITY_GATE/","title":"CI SECURITY GATE","text":"<p>CI Security Gate (v1)</p> <p>Purpose</p> <p>Block merges/releases unless minimum security conditions pass.</p> <p>Gate Inputs (artifacts)</p> <p>unit.json, invariants.json, slither.json, mythril.json</p> <p>security-findings.json (rollup), gas.json (baseline diff)</p> <p>abi lock checks (scripts/check-abi-lock.js)</p> <p>Pass Criteria</p> <p>No Critical/High in security-findings.json</p> <p>Invariants total violations == 0; steps \u2265 100k/suite</p> <p>Static analysis completed (tools responsive), findings triaged</p> <p>ABI lock checks OK for Token/PSM events</p> <p>Optional: gas regressions within agreed thresholds</p> <p>Failure Handling</p> <p>CI annotates PR; requires explicit risk waiver label by CODEOWNERS to override</p>"},{"location":"COLLATERAL_REGISTRY/","title":"COLLATERAL REGISTRY","text":"<p>Collateral Registry \u2014 Spec (v1)</p> <p>Purpose</p> <p>Canonical whitelist check for protocol modules (PSM, AutoConverter, Vault)</p> <p>Advisory cache of decimals and off-chain metadata pointer (hash)</p> <p>Requirements</p> <p>isSupported(asset) MUST be true for assets usable in PSM/Vault paths</p> <p>Decimals cache used as optimization; modules must handle mismatches safely</p> <p>Metadata JSON conforms to schemas/asset_metadata.schema.json; keccak256 hash may be stored on-chain</p> <p>Eventing</p> <p>AssetListed(asset, listed) on add/remove</p> <p>AssetMetadataUpdated(asset, metaHash) on metadata change</p> <p>Interfaces</p> <p>On-chain: contracts/interfaces/ICollateralRegistry.sol</p> <p>Off-chain JSON samples: tests/vectors/collateral_assets.sample.json</p>"},{"location":"DEV9_ASSIGNMENT/","title":"DEV 9 \u2014 DAO Timelock &amp; Governance Sweep","text":""},{"location":"DEV9_ASSIGNMENT/#scope","title":"Scope","text":"<ul> <li>Review/Hardening: <code>contracts/core/DAO_Timelock.sol</code></li> <li>Konsolidierung Admin-Konzept: SafetyAutomata / ParameterRegistry</li> <li>Saubere Events, Fehler, IDs (bytes32)</li> <li>Minimaltests: Queue/Execute/Cancel + Delay/Grace Checks</li> <li>Governance-Doku</li> </ul>"},{"location":"DEV9_ASSIGNMENT/#muss-kriterien","title":"Muss-Kriterien","text":"<ul> <li><code>onlyAdmin</code> nutzt ein zentrales Admin-Prinzip (kein Shadow-Owner).</li> <li><code>queue(tx)</code> -&gt; <code>execute(tx)</code> erst nach Delay; <code>cancel(tx)</code> jederzeit vor Ablauf.</li> <li><code>gracePeriod</code> nach Delay: Transaktionen verfallen nach Ende der Grace.</li> <li>Events: <code>Queued</code>, <code>Executed</code>, <code>Cancelled</code> mit Param-Hash.</li> <li>Fehler: <code>ACCESS_DENIED()</code>, <code>INVALID_DELAY()</code>, <code>EXEC_TOO_EARLY()</code>, <code>TX_EXPIRED()</code>.</li> <li>Konstanten: <code>MODULE_ID = keccak256(\"TIMELOCK\")</code>.</li> </ul>"},{"location":"DEV9_ASSIGNMENT/#tests-minimal","title":"Tests (Minimal)","text":"<ul> <li><code>testQueueThenExecuteAfterDelay()</code></li> <li><code>testExecuteTooEarlyReverts()</code></li> <li><code>testCancelPreventsExecute()</code></li> <li><code>testExpiredTxReverts()</code></li> </ul>"},{"location":"DEV9_ASSIGNMENT/#deliverables","title":"Deliverables","text":"<ol> <li>Contracts: minimal n\u00f6tige \u00c4nderungen (keine Funktionslawine).</li> <li>Tests: Foundry, gr\u00fcn.</li> <li>Docs: <code>docs/GOVERNANCE.md</code> (Kurz, pr\u00e4zise).</li> <li>CHANGELOG-Eintrag.</li> <li>Logeintrag <code>docs/logs/project.log</code>.</li> </ol>"},{"location":"DEV9_ASSIGNMENT/#definition-of-done","title":"Definition of Done","text":"<ul> <li>Foundry CI: gr\u00fcn</li> <li>Solidity CI: gr\u00fcn</li> <li>Keine neuen Lint-Warnungen zu Naming/Imports (wenn m\u00f6glich)</li> </ul>"},{"location":"DEVELOPER_ONBOARDING/","title":"DEVELOPER ONBOARDING","text":"<p>1kUSD \u2014 External Developer Onboarding</p> <p>Project repo: https://github.com/NeaBouli/1kUSD</p> <p>Docs (GitHub Pages): https://neabouli.github.io/1kUSD/</p> <p>What is 1kUSD?</p> <p>Spec-first stablecoin/PSM protocol design with clear module boundaries, governance-gated parameter writes (DAO/Timelock), central safety controls (pause/caps/rate-limits), and reorg-aware indexing. Current repo delivers complete specifications, testing/security plans, docs site, and CI skeletons.</p> <p>Architecture (high level)</p> <p>Token (OneKUSD), PSM, Collateral Vault, Safety Automata (pause/caps/rate-limits, guardian sunset), Oracle Aggregator &amp; Feeds, Proof of Reserves, AutoConverter &amp; Routing Adapters, Governance (DAO/Timelock, Parameter Registry, Treasury). Read the normative specs in contracts/specs/*.md first.</p> <p>Invariants &amp; Testing</p> <p>I1\u2013I17 cover conservation, safety, governance exclusivity, oracle coherence, CEI/reentrancy. Test plan and exit criteria in tests/specs/.</p> <p>Repository (essentials)</p> <p>contracts/specs/: normative module specs.</p> <p>contracts/core/, contracts/interfaces/: minimal skeletons/interfaces.</p> <p>docs/: docs site sources (MkDocs).</p> <p>interfaces/, integrations/specs/, schemas/.</p> <p>.github/workflows/: CI skeleton + Pages deploy.</p> <p>How to contribute</p> <p>Open an issue to propose changes; reference the spec(s).</p> <p>Fork \u2192 topic branch (use conventional commits).</p> <p>Implement strictly per spec (events, errors, CEI, guards, decimals).</p> <p>Add tests aligned with invariants &amp; test plan; produce JSON reports per reports/SCHEMA.md where possible.</p> <p>Keep docs in sync (docs/*, mkdocs.yml when adding pages).</p> <p>Open a PR with rationale, coverage and analysis notes.</p> <p>Quality expectations</p> <p>Spec compliance; CEI ordering; nonReentrant if required.</p> <p>Invariants (I1\u2013I17) hold in fuzz.</p> <p>Coverage guideline: \u226590% statements / \u226585% branches / \u226590% functions.</p> <p>Static analysis: no Critical/High open.</p> <p>CI green; docs updated.</p> <p>Useful links</p> <p>Repo: https://github.com/NeaBouli/1kUSD</p> <p>Docs: https://neabouli.github.io/1kUSD/</p> <p>CONTRIBUTING: ./CONTRIBUTING.md</p> <p>Security policy: ./SECURITY.md</p>"},{"location":"ERROR_CATALOG/","title":"Error Catalog (v1)","text":"<p>Status: Docs. Audience: Core devs, SDKs, dApp.</p>"},{"location":"ERROR_CATALOG/#common-shared-across-modules","title":"Common (shared across modules)","text":"<ul> <li><code>ACCESS_DENIED</code> \u2014 caller lacks role/admin</li> <li><code>PAUSED</code> \u2014 module paused by SafetyAutomata</li> <li><code>ZERO_ADDRESS</code> \u2014 address parameter is zero</li> <li><code>INVALID_AMOUNT</code> \u2014 amount == 0 or invalid</li> <li><code>NOT_IMPLEMENTED</code> \u2014 stub path in skeletons</li> <li><code>DEADLINE_EXPIRED</code> \u2014 user-provided deadline exceeded</li> </ul>"},{"location":"ERROR_CATALOG/#psm","title":"PSM","text":"<ul> <li><code>UNSUPPORTED_ASSET</code></li> <li><code>SLIPPAGE</code></li> <li><code>INSUFFICIENT_LIQUIDITY</code></li> <li>Oracle guard surfaces (mapped from ORACLE state): <code>ORACLE_STALE</code>, <code>ORACLE_UNHEALTHY</code>, <code>DEVIATION_EXCEEDED</code></li> </ul>"},{"location":"ERROR_CATALOG/#vault","title":"Vault","text":"<ul> <li><code>ASSET_NOT_SUPPORTED</code></li> <li><code>CAP_EXCEEDED</code></li> <li><code>INSUFFICIENT_BALANCE</code></li> <li><code>FOT_NOT_SUPPORTED</code> (fee-on-transfer tokens rejected)</li> </ul>"},{"location":"ERROR_CATALOG/#token-onekusd","title":"Token (OneKUSD)","text":"<ul> <li><code>INSUFFICIENT_ALLOWANCE</code></li> <li><code>INSUFFICIENT_BALANCE</code></li> <li><code>INVALID_SIGNER</code> (EIP-2612)</li> <li><code>DEADLINE_EXPIRED</code> (EIP-2612)</li> </ul>"},{"location":"ERROR_CATALOG/#governanceregistrysafety","title":"Governance/Registry/Safety","text":"<ul> <li><code>GUARDIAN_EXPIRED</code> (post-sunset)</li> <li><code>PARAM_NOT_FOUND</code> / <code>PARAM_INVALID</code> (optional, if implemented)</li> <li><code>QUEUE_ONLY</code> (if execution is constrained by policy)</li> </ul>"},{"location":"ERROR_CATALOG/#mapping-to-ux","title":"Mapping to UX","text":"<ul> <li>Display short, user-friendly messages.</li> <li>Include remediation hints (e.g., \u201cIncrease allowance\u201d, \u201cCheck paused status\u201d, \u201cOracle unhealthy\u201d).</li> </ul>"},{"location":"FAQ/","title":"1kUSD \u2014 Public FAQ (Contributors Edition)","text":"<p>What is 1kUSD? A community-driven, fully on-chain stablecoin. Parity is kept via a Peg-Stability-Module (PSM); collateral is converted to approved stables on deposit (no CDP-style debt).</p> <p>How is it different from CDP stablecoins (e.g., DAI)? We do not target a collateralization ratio. We run a parity machine (PSM) and use convert-on-deposit via the AutoConverter to keep reserves stable-denominated. See: PSM vs CDP.</p> <p>How is the peg maintained in stress? Rate limits + per-asset caps, oracle staleness/deviation guards (fail-closed), and a pause circuit (guardian with sunset; DAO via timelock). Fees are parameterized via the Parameter Registry.</p> <p>Where do parameters live? Who can change them? On-chain Parameter Registry. Writes only through DAO/Timelock. Guardian can pause only and auto-expires (sunset).</p> <p>Which oracles? How do you avoid manipulation? Multi-source aggregation (median/trimmed-mean), per-feed maxAge and maxDeviationBps, single coherent snapshot used for quote &amp; execution. Providers are pluggable and governed.</p> <p>How does 1kUSD integrate with Kaspa? No consensus changes. We use an indexer finality watermark and adapt to Kaspa throughput as it evolves. See: Kaspa Integration Notes.</p> <p>What is the security posture? Specs + invariants (I1\u2013I17), fuzz/property tests, static analysis in CI, audits &amp; bug bounty before mainnet. Incident &amp; parameter change runbooks are in docs.</p> <p>Where is the code/specs? - Contract specs: <code>contracts/specs/</code> - Interfaces: <code>contracts/interfaces/</code> - Test plan &amp; security: <code>tests/specs/</code> - Docs site (this): <code>docs/</code> (MkDocs)</p> <p>How to contribute a change? Open an issue, fork, PR with green CI (unit + invariants + static + docs). For protocol changes, include the spec delta and updated invariants mapping.</p> <p>Roadmap (high level) EVM testnet \u2192 EVM mainnet + integrations \u2192 Kaspa native interfaces \u2192 Kaspa L1 parity module.</p> <p>License Code: AGPL-3.0. Docs: repository default.</p> <p>Links - Repo: https://github.com/NeaBouli/1kUSD - Docs site home: /1kUSD/</p>"},{"location":"FEE_ACCRUAL/","title":"FEE ACCRUAL","text":"<p>Fee Accrual (PSM &amp; Vault) \u2014 Normative</p> <p>Fee location</p> <p>To1k: fee charged in tokenIn \u2192 accrue on Vault side (preferred) OR accumulate in PSM then sweep.</p> <p>From1k: fee charged in tokenOut \u2192 accrue on Vault before user transfer.</p> <p>Rounding</p> <p>Fees computed via floor (see ROUNDING_RULES.md).</p> <p>Accrual bucket increments exactly by computed fee.</p> <p>Sweeping</p> <p>Only DAO/Timelock authorized caller for sweepFees (or PSM with ROLE_SWEEPER for its own accruals if policy allows).</p> <p>Sweep emits FeeSwept(asset, amount) and transfers to Treasury.</p> <p>Reporting</p> <p>Indexer exposes pendingFees per asset.</p> <p>PoR includes pendingFees separately from spendable balances.</p>"},{"location":"GOVERNANCE/","title":"Governance Overview (1kUSD)","text":""},{"location":"GOVERNANCE/#roles","title":"Roles","text":"<ul> <li>Admin (DAO/Multisig): Parametrisierung, Timelock-Owner.</li> <li>Timelock: Erzwingt Delay/Grace f\u00fcr sensitive \u00c4nderungen.</li> <li>SafetyAutomata: Systemweite Pause/Unpause pro Modul-ID.</li> </ul>"},{"location":"GOVERNANCE/#timelock-parameters","title":"Timelock Parameters","text":"<ul> <li><code>delay</code>: Mindestwartezeit bis eine TX <code>execute</code>-bar wird.</li> <li><code>gracePeriod</code>: Fenster nach Delay; danach verf\u00e4llt die TX.</li> </ul>"},{"location":"GOVERNANCE/#flow","title":"Flow","text":"<p>1) Queue: Admin k\u00fcndigt Operation an \u2192 <code>Queued(txHash, eta)</code>. 2) Execute: Nach <code>block.timestamp &gt;= eta</code> und <code>&lt; eta + gracePeriod</code>. 3) Cancel: Vor <code>execute</code> jederzeit m\u00f6glich \u2192 <code>Cancelled(txHash)</code>.</p>"},{"location":"GOVERNANCE/#invariants","title":"Invariants","text":"<ul> <li>Kein Bypass von Delay/Grace \u00fcber Admin-Funktionen.</li> <li>Jede sensitive Funktion geht \u00fcber Timelock.</li> <li>Modul-ID: <code>TIMELOCK</code> (keccak256).</li> </ul>"},{"location":"GOVERNANCE/#security-notes","title":"Security Notes","text":"<ul> <li>Kein einzelnes EOA als Dauer-Owner; Admin = DAO/Multisig.</li> <li>Volle On-Chain Auditability via Events.</li> </ul>"},{"location":"GOVERNANCE_OPS/","title":"Ops","text":"<p>Governance Ops (v1)</p> <p>Artifacts</p> <p>Proposal schema: governance/schemas/proposal.schema.json</p> <p>Example proposals: governance/examples/*.json</p> <p>Queue/Execute helpers: scripts/gov-queue.mjs, scripts/gov-exec.mjs</p> <p>Workflow (conceptual)</p> <p>Draft a proposal JSON and validate it against the schema.</p> <p>Queue via Timelock (script prints descHash and planned ETA).</p> <p>After delay, execute (script prints execution steps).</p> <p>Indexer records events (proposal queued/executed).</p> <p>Validation</p> <p>Use AJV validator (scripts/validate-json.mjs): node scripts/validate-json.mjs governance/schemas/proposal.schema.json governance/examples/proposal.increase-psm-fee.json</p>"},{"location":"GOVERNANCE_PARAM_WRITES/","title":"Parameter Writes","text":"<p>Governance Param Writes \u2014 Timelock Flow (v1)</p> <p>Status: Docs (normative). Language: EN.</p> <p>Objective</p> <p>Define how governance changes protocol parameters via Timelock to the on-chain Parameter Registry. All writes are executed by the Timelock; regular EOAs cannot write.</p> <p>Roles</p> <p>Governor: creates proposals (off-chain coordination / on-chain governor contract)</p> <p>Timelock: schedules and executes transactions after delay</p> <p>ParameterRegistry: authoritative key/value map</p> <p>Required Write Surface (Registry)</p> <p>The Parameter Registry MUST expose Timelock-restricted setters:</p> <p>function setUint(bytes32 key, uint256 value) external; function setAddress(bytes32 key, address value) external;</p> <p>Reads remain public (getUint/getAddress). Only the Timelock is authorized to call setters.</p> <p>Canonical Flow</p> <p>Propose: governor prepares a param-change bundle (JSON) with one or more set operations.</p> <p>Queue: governor queues calldata through Timelock with target=ParameterRegistry, value=0.</p> <p>Delay: Timelock enforces minDelay (e.g., 48\u201396h).</p> <p>Execute: after delay, Timelock executes queued ops; events emitted by Registry.</p> <p>Verify: indexer and ops verify post-state and announce.</p> <p>Calldata Encoding (EVM)</p> <p>Target: ParameterRegistry address</p> <p>Selector setUint: bytes4(keccak256(\"setUint(bytes32,uint256)\"))</p> <p>Selector setAddress: bytes4(keccak256(\"setAddress(bytes32,address)\"))</p> <p>Arguments ABI-encoded</p> <p>Event Expectations</p> <p>Registry emits ParamUintSet(key, value, actor)</p> <p>Registry emits ParamAddressSet(key, value, actor)</p> <p>Timelock emits CallScheduled/CallExecuted (implementation-specific)</p> <p>Safety Notes</p> <p>Never batch unrelated risk domains in one proposal.</p> <p>For caps/rate limits, stage values upward/downward with monitoring windows.</p> <p>Emergency pause remains in Safety-Automata; it does not write params.</p> <p>References</p> <p>docs/PARAM_KEYS_CANON.md</p> <p>ops/schemas/param_change.schema.json</p> <p>ops/proposals/param_change.sample.json</p> <p>scripts/compose-param-change.ts</p>"},{"location":"GUARDIAN_SUNSET_HOOKS/","title":"Guardian Sunset Hooks (Design Notes)","text":"<p>Status: Docs. Language: EN.</p>"},{"location":"GUARDIAN_SUNSET_HOOKS/#goal","title":"Goal","text":"<p>Make the guardian strictly temporary and auditable. After sunset: - Guardian can no longer pause modules. - Only DAO/Timelock can change parameters or pause/unpause.</p>"},{"location":"GUARDIAN_SUNSET_HOOKS/#mechanisms-options","title":"Mechanisms (options)","text":"<ol> <li>Timestamp gate in SafetyAutomata:</li> <li><code>guardianSunsetTs</code> immutable (or set-once).</li> <li><code>if (msg.sender == guardian &amp;&amp; block.timestamp &gt;= guardianSunsetTs) revert GUARDIAN_EXPIRED();</code></li> <li>Role drop via Timelock:</li> <li>Timelock executes <code>setGuardian(address(0))</code> at sunset.</li> <li>Circuit preference:</li> <li>Permit guardian to only <code>pause</code> (never <code>unpause</code>), even before sunset.</li> <li>Unpause must go through Timelock to ensure transparency.</li> </ol>"},{"location":"GUARDIAN_SUNSET_HOOKS/#events","title":"Events","text":"<ul> <li><code>GuardianSet(old, new, sunsetTs)</code></li> <li><code>GuardianSunsetExecuted(ts)</code></li> </ul>"},{"location":"GUARDIAN_SUNSET_HOOKS/#ops-checklist","title":"Ops Checklist","text":"<ul> <li>Announce sunset date/time in CHANGELOG.</li> <li>Dry-run on staging (see <code>ops/runbooks/EMERGENCY_DRILLS.md</code>).</li> <li>Archive Timelock tx hashes and module admin states.</li> </ul>"},{"location":"GUARDIAN_SUNSET_RUNBOOK/","title":"GUARDIAN SUNSET RUNBOOK","text":"<p>Guardian Sunset \u2014 Rehearsal Runbook (v1)</p> <p>Status: Ops doc.</p> <p>Purpose</p> <p>Ensure temporary Guardian (pause-only) cannot act after sunset timestamp and that DAO retains full control.</p> <p>Preconditions</p> <p>PARAM_GUARDIAN_SUNSET_TS configured in registry</p> <p>Safety-Automata checks guardian expiry on pause()</p> <p>Steps</p> <p>Read current PARAM_GUARDIAN_SUNSET_TS and block.timestamp.</p> <p>Before sunset:</p> <p>Trigger pause(moduleId) via Guardian \u2192 expect success, events emitted.</p> <p>Unpause via DAO path (Timelock) \u2192 expect success.</p> <p>After sunset:</p> <p>Attempt pause(moduleId) via Guardian \u2192 expect revert GUARDIAN_EXPIRED.</p> <p>DAO can still pause/resume via Timelock.</p> <p>Log all tx hashes; attach to release notes.</p> <p>Exit Criteria</p> <p>Guardian cannot pause after sunset</p> <p>DAO pause/resume unaffected</p> <p>Indexer captures ModulePaused/Unpaused timeline consistently</p>"},{"location":"INDEXER_EVENT_NOTES/","title":"INDEXER EVENT NOTES","text":"<p>Indexer Event Notes (PSM/Vault/Token)</p> <p>Status: Docs. Audience: Indexer devs, analytics.</p> <p>Topics strategy</p> <p>Always index events with (user, asset) as topics where applicable.</p> <p>PSM:</p> <p>SwapTo1kUSD: topics[0]=sig, topics[1]=user, topics[2]=tokenIn.</p> <p>SwapFrom1kUSD: topics[0]=sig, topics[1]=user, topics[2]=tokenOut.</p> <p>Vault:</p> <p>Deposit/Withdraw: topics[1]=asset, topics[2]=from|to.</p> <p>Reconciliation</p> <p>1kUSD supply delta equals:</p> <p>+minted on SwapTo1kUSD</p> <p>-amountIn (burn) implied by SwapFrom1kUSD (from token Transfer if emitted).</p> <p>Vault balances should reconcile as:</p> <p>asset += amountIn on Deposit</p> <p>asset -= amount on Withdraw</p> <p>Fee flow:</p> <p>PSM FeeAccrued(asset, amount) must eventually match Vault FeeSwept(asset, to, amount).</p> <p>Finality &amp; reorgs</p> <p>Consumers must wait N confirmations (chain-dependent) before labeling events as final.</p> <p>Reconcile by block number + tx hash; rebuild on reorg.</p> <p>ABI &amp; schema</p> <p>Canonical ABI files:</p> <p>abi/psm.events.json</p> <p>abi/vault.events.json</p> <p>abi/token.events.json</p> <p>Include these ABIs verbatim in indexer deployments for consistent decoding.</p> <p>Edge cases</p> <p>Fee-on-transfer tokens must be rejected at ingress; indexers may still see Transfer deltas.</p> <p>Zero-amount events should not be emitted; treat as anomaly if observed.</p> <p>Performance notes</p> <p>Prefer Bloom filter pre-checks on topics for large datasets.</p> <p>Batch process blocks; commit checkpoints (block number, last tx processed).</p>"},{"location":"INDEXER_SCHEMAS/","title":"INDEXER SCHEMAS","text":"<p>Indexer Schemas \u2014 Records &amp; Samples</p> <p>Status: Docs. Audience: Indexer devs/analytics.</p> <p>Files:</p> <p>indexer/schemas/swap.schema.json</p> <p>indexer/schemas/fee.schema.json</p> <p>indexer/schemas/vault_snapshot.schema.json Samples:</p> <p>indexer/samples/*.sample.json</p> <p>Conventions:</p> <p>All numbers are strings unless explicitly integer (block, logIndex, timestamp, chainId).</p> <p>finality: pending/safe/final</p> <p>address fields: 0x-prefixed, 40 hex chars</p>"},{"location":"INVARIANTS_EXEC_MAP/","title":"INVARIANTS EXEC MAP","text":"<p>Invariants \u2014 Executable Mapping (v1)</p> <p>Status: Normative. Language: EN.</p> <p>Scope</p> <p>Bridges formal invariants (docs/INVARIANTS.md) to concrete executable checks (unit/integration/fuzz). Each invariant has:</p> <p>ID, Description</p> <p>Scope (module/contracts)</p> <p>Checkpoint (when to assert)</p> <p>Metric(s) to measure</p> <p>Test Harness Notes</p> <p>I1 \u2014 Supply Bound</p> <p>Desc: \u03a3 USD(vault balances minus fees) \u2265 total 1kUSD supply</p> <p>Scope: PSM, Vault, Token, Oracle (advisory)</p> <p>Checkpoint: after each swap/deposit/withdraw</p> <p>Metrics: supply1k, balances[asset], pendingFees[asset], price[asset]</p> <p>Harness: mock oracle snapshot; compute advisory sumUSD and compare with supply1k</p> <p>I2 \u2014 PSM Conservation</p> <p>Desc: Accounting (in/out) and fee accrual consistent for both directions</p> <p>Checkpoint: after swapTo / swapFrom</p> <p>Metrics: gross, fee, net; events emitted; vault deltas</p> <p>Harness: compare vectors (docs/PSM_QUOTE_MATH.md, tests/vectors/psm_quote_vectors.json)</p> <p>I3 \u2014 No Free Mint</p> <p>Desc: Mint only after Vault deposit success</p> <p>Checkpoint: swapTo path</p> <p>Harness: force deposit revert or zero-received (FoT extreme) \u2192 ensure no mint</p> <p>I4 \u2014 No Unauthorized Burn</p> <p>Desc: Burn only callable by authorized modules</p> <p>Harness: attempt burn from EOA or foreign contract \u2192 revert</p> <p>I5 \u2014 Caps Enforced</p> <p>Desc: Ingress reverts if cap exceeded</p> <p>Harness: use vault_edge_vectors.json (cap exceed)</p> <p>I6 \u2014 Rate Limits</p> <p>Desc: Sliding window gross flow \u2264 maxAmount</p> <p>Harness: rate_limiter_vectors.json</p> <p>I7 \u2014 Pause Safety</p> <p>Desc: When paused, state-changing ops revert</p> <p>Harness: pause via Safety \u2192 swaps revert</p> <p>I8 \u2014 Oracle Liveness</p> <p>Desc: stale prices block quotes/exec</p> <p>Harness: oracle_guard_vectors.json (stale)</p> <p>I9 \u2014 Deviation Guard</p> <p>Desc: dispersion beyond maxDeviationBps marks unhealthy</p> <p>Harness: oracle_guard_vectors.json (outlier)</p> <p>I10 \u2014 Atomic Snapshot</p> <p>Desc: quote snapshot == exec snapshot (or strict re-read rule)</p> <p>Harness: compare IDs or values within tx; mismatch \u2192 revert</p> <p>I11\u2013I13 \u2014 Events Consistency</p> <p>Desc: emitted events reflect state deltas and accounting</p> <p>Harness: decode events and cross-check with vault/token balances</p> <p>I14\u2013I15 \u2014 Reentrancy/Order</p> <p>Desc: CEI, nonReentrant; no external callbacks</p> <p>Harness: reentrancy harness; attempt callback on token hooks (mock ERC-777-like)</p> <p>I16 \u2014 Treasury Path Only</p> <p>Desc: Vault GOV_SPEND only via Timelock</p> <p>Harness: spend from non-timelock \u2192 revert</p> <p>I17 \u2014 Governance-Only Params</p> <p>Desc: Parameter changes only via Timelock</p> <p>Harness: setUint/setAddress from EOA \u2192 revert; timelock path \u2192 ok</p>"},{"location":"INVARIANTS_HARNESS_NOTES/","title":"INVARIANTS HARNESS NOTES","text":"<p>Invariants Harness Notes (v1) General</p> <p>Deterministic time \u2014 control timestamp advance per step.</p> <p>Snapshot/rollback \u2014 store minimal state deltas to replay failing traces.</p> <p>Event capture \u2014 decode with clients/sdk/events.ts and include in reports.</p> <p>PSM Paths</p> <p>Randomize direction, asset, amount within caps/rate limits.</p> <p>Inject faults: pause, stale oracle, deviation spike, FoT deposit.</p> <p>Vault Paths</p> <p>Track balance deltas across assets; verify Deposit/Withdraw parity.</p> <p>Governance Paths</p> <p>Random param changes via Timelock mock (respect delays) within safe ranges.</p> <p>Reporting</p> <p>On violation: dump JSON with balances, supply, last N events, current params, and oracle snapshot.</p>"},{"location":"JSON_VALIDATION/","title":"JSON Validation Notes","text":"<p>Status: Docs. Language: EN.</p>"},{"location":"JSON_VALIDATION/#schemas","title":"Schemas","text":"<ul> <li>Addresses: <code>ops/config/schema/addresses.schema.json</code></li> <li>Params: <code>ops/config/schema/params.schema.json</code></li> </ul>"},{"location":"JSON_VALIDATION/#how-to-validate-locally","title":"How to validate (locally)","text":"<ul> <li>VS Code: install a JSON schema extension; <code>$schema</code> is embedded in the JSON files.</li> <li>CLI (example): <code>npx ajv-cli validate -s ops/config/schema/addresses.schema.json -d ops/config/addresses.staging.json</code></li> </ul> <p>We intentionally avoid hard dependencies in CI at this stage. When needed, add a dedicated workflow job using <code>ajv-cli</code> or <code>spectral</code>.</p>"},{"location":"KASPA_INTEGRATION_NOTES/","title":"Kaspa Integration Notes","text":"<ul> <li>No consensus changes (no GHOSTDAG/PHANTOM tweaks).</li> <li>Finality watermark in the indexer for replay/reorg handling.</li> <li>Throughput: modules are designed for high-frequency swaps; guards fail-closed if oracles stale or caps/rate-limits exhausted.</li> <li>Roadmap: expose native interfaces when Kaspa smart contracts are production-ready, then consider L1 parity keeper.</li> </ul>"},{"location":"MODULE_IDS/","title":"Canonical Module IDs (bytes32)","text":"<p>Status: Docs. Language: EN.</p> <p>Modules must use the same IDs across on-chain code, SDKs, and ops tooling.</p> Name bytes32 (keccak256 of string) String seed PSM <code>keccak256(\"PSM\")</code> <code>\"PSM\"</code> VAULT <code>keccak256(\"VAULT\")</code> <code>\"VAULT\"</code> ORACLE <code>keccak256(\"ORACLE\")</code> <code>\"ORACLE\"</code> TOKEN <code>keccak256(\"TOKEN\")</code> <code>\"TOKEN\"</code> REGISTRY <code>keccak256(\"REGISTRY\")</code> <code>\"REGISTRY\"</code> GOV <code>keccak256(\"GOV\")</code> <code>\"GOV\"</code> <p>Tip: Clients should compute the hash rather than hardcoding hex literals to avoid chain-specific mismatches.</p>"},{"location":"NOTES_ORACLE_MINIMAL/","title":"Oracle Minimal Notes (DEV42)","text":"<p>Scope: Admin-gated mock prices for dev/staging; no real aggregation.</p>"},{"location":"NOTES_ORACLE_MINIMAL/#what-changed","title":"What changed","text":"<ul> <li>Added storage <code>mapping(address =&gt; Price) _mockPrice</code>.</li> <li>Added <code>setPriceMock(asset, price, decimals, healthy)</code> (onlyAdmin, notPaused).</li> <li><code>getPrice(asset)</code> returns the stored mock, default zero struct if unset.</li> </ul>"},{"location":"NOTES_ORACLE_MINIMAL/#operational-guidance","title":"Operational Guidance","text":"<ul> <li>Do not use on mainnet. Replace with real aggregators (Chainlink/Pyth/TWAP).</li> <li>For dev/staging scripts, set mocks at deploy time to unblock flows (PSM quotes, UI).</li> <li>Keep <code>healthy=false</code> to simulate oracle-down scenarios during drills.</li> </ul>"},{"location":"NOTES_ORACLE_MINIMAL/#next-steps","title":"Next steps","text":"<ul> <li>Implement adapter policy &amp; median/trimmed-mean per <code>ORACLE_AGGREGATOR_SPEC.md</code>.</li> </ul>"},{"location":"NOTES_PSM_EXECUTION/","title":"Notes \u2014 PSM Execution (DEV52)","text":"<ul> <li>Mirror quotes exactly; same block oracle snapshot to avoid drift.</li> <li>Prefer fee accrual into Vault buckets over immediate treasury withdraws.</li> <li>Enforce CEI: compute before any external calls; mint/burn only after Vault ops check out.</li> <li>Reentrancy: guard PSM swap functions; Vault should avoid calling back into PSM.</li> </ul>"},{"location":"NOTES_PSM_MINIMAL/","title":"PSM Minimal Notes (DEV40)","text":"<p>Scope: Token whitelist + dummy quotes. No economic logic, no transfers, no mint/burn.</p>"},{"location":"NOTES_PSM_MINIMAL/#what-changed","title":"What changed","text":"<ul> <li>Added <code>setSupportedToken(asset,bool)</code> and <code>isSupportedToken(asset)</code> in PSM.</li> <li><code>quoteTo1kUSD/quoteFrom1kUSD</code> now return <code>(amountIn, 0, amountIn)</code> if <code>asset</code> is supported, else revert <code>UNSUPPORTED_ASSET</code>.</li> <li><code>swap*</code> functions remain <code>NOT_IMPLEMENTED</code>.</li> </ul>"},{"location":"NOTES_PSM_MINIMAL/#rationale","title":"Rationale","text":"<ul> <li>Unblocks dApp/SDK integration and status pages without exposing unfinished mint/burn.</li> <li>Keeps safety invariant: no state changes, no funds movement at this stage.</li> </ul>"},{"location":"NOTES_TOKEN_PERMIT/","title":"Token Permit Notes (DEV43)","text":"<p>Scope: Added EIP-2612 <code>permit</code> with EIP-712 domain separator; optional surface via <code>IERC2612</code>.</p>"},{"location":"NOTES_TOKEN_PERMIT/#what-changed","title":"What changed","text":"<ul> <li>New interface <code>contracts/interfaces/IERC2612.sol</code>.</li> <li>Token now implements <code>permit</code>, <code>nonces</code>, and dynamic <code>DOMAIN_SEPARATOR()</code> (chainId-aware).</li> <li>Existing roles/pause semantics unchanged: pause gates only mint/burn, transfers unaffected.</li> </ul>"},{"location":"NOTES_TOKEN_PERMIT/#integration-hints","title":"Integration Hints","text":"<ul> <li>EIP-712 domain: name=<code>1kUSD</code>, version=<code>1</code>, chainId=current, verifyingContract=token address.</li> <li>Typehash: <code>Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)</code>.</li> <li>For SDKs: read <code>DOMAIN_SEPARATOR()</code> at runtime; do not cache across chainId changes.</li> </ul>"},{"location":"NOTES_TOKEN_PERMIT/#next-steps","title":"Next steps","text":"<ul> <li>Add typed-data examples to client SDK specs.</li> <li>Optional: <code>permit</code> negative tests in DEV13/CI once tests exist.</li> </ul>"},{"location":"NOTES_VAULT_ACCOUNTING/","title":"Notes \u2014 Vault Accounting (DEV51)","text":"<ul> <li>Vault stores raw token units per asset; no rescaling.</li> <li>Fees are tracked per-asset in <code>pendingFees[asset]</code> and swept via Timelock.</li> <li>Fee-on-transfer tokens rejected by balance delta guard.</li> <li>Caps enforced on ingress; egress unrestricted except for balance/paused checks.</li> </ul>"},{"location":"NOTES_VAULT_MINIMAL/","title":"Vault Minimal Notes (DEV41)","text":"<p>Scope: Batch getter for supported assets; <code>balanceOf</code> remains dummy (0). No transfers/accounting.</p>"},{"location":"NOTES_VAULT_MINIMAL/#what-changed","title":"What changed","text":"<ul> <li>Added <code>areAssetsSupported(address[]) -&gt; bool[]</code> to support UIs/SDKs without on-chain iteration assumptions.</li> <li>Kept <code>isAssetSupported(address)</code> for simple checks.</li> <li>No storage of asset lists (no enumeration), avoiding extra state &amp; complexity at this stage.</li> </ul>"},{"location":"NOTES_VAULT_MINIMAL/#rationale","title":"Rationale","text":"<ul> <li>Enables dApp/SDK token pickers to validate multiple assets in one call.</li> <li>Keeps the minimal surface stable until real accounting is added.</li> </ul>"},{"location":"ORACLE_ADAPTERS/","title":"ORACLE ADAPTERS","text":"<p>Oracle Adapters \u2014 Spec (v1)</p> <p>Purpose</p> <p>Normalize external price sources for OracleAggregator.</p> <p>Adapter Types</p> <p>chainlink: on-chain aggregator feed</p> <p>pyth: off-chain delivered feed (price + conf + publishTime)</p> <p>dex_twap: on-chain DEX TWAP window</p> <p>Required Fields (see schema)</p> <p>Common: type, pair, decimalsOut, heartbeatSec, maxDeviationBps</p> <p>chainlink: address</p> <p>pyth: priceId</p> <p>dex_twap: pool, windowSec, quoteToken</p> <p>Validation</p> <p>JSON schema: oracles/schemas/adapter.schema.json</p> <p>Catalog per chain: oracles/catalog/.json <p>Examples: oracles/examples/*.json</p>"},{"location":"ORACLE_AGGREGATION_GUARDS/","title":"ORACLE AGGREGATION GUARDS","text":"<p>Oracle Aggregation Guards (v1)</p> <p>Status: Docs (normative). Language: EN. Audience: Core devs, auditors, SDK.</p> <p>0) Scope</p> <p>Defines multi-source price aggregation with guards: staleness, deviation, health flags. Supports MEDIAN (default) and TRIMMED_MEAN (k-of-n).</p> <p>1) Inputs &amp; Semantics</p> <p>Each source i provides:</p> <p>price_i (signed int), decimals_i</p> <p>updatedAt_i (unix sec)</p> <p>healthy_i (bool from adapter)</p> <p>Global params (registry):</p> <p>PARAM_ORACLE_MAX_AGE_SEC (max staleness)</p> <p>PARAM_ORACLE_MAX_DEVIATION_BPS (max allowed deviation across accepted sources)</p> <p>Mode: MEDIAN (default) or TRIMMED_MEAN with trim = floor(n/4) unless configured</p> <p>Output decimals d_p (e.g., 8)</p> <p>2) Normalization</p> <p>Normalize to d_p: norm_i = floor( price_i * 10^(d_p - decimals_i) )</p> <p>Reject source if:</p> <p>healthy_i == false</p> <p>now - updatedAt_i &gt; MAX_AGE_SEC</p> <p>price_i &lt;= 0 (non-positive)</p> <p>Let A = sorted(norm_i) from accepted sources (n = |A|). If n == 0: unhealthy.</p> <p>3) Aggregation</p> <p>MEDIAN:</p> <p>if n odd: p = A[(n-1)/2]</p> <p>if n even: p = floor( (A[n/2 - 1] + A[n/2]) / 2 )</p> <p>TRIMMED_MEAN (k-of-n):</p> <p>trim t = min(config_t, floor(n/4))</p> <p>if n &lt; 2*t+1 \u2192 fall back to MEDIAN</p> <p>slice B = A[t .. n-1-t]</p> <p>p = floor( sum(B) / |B| )</p> <p>4) Deviation Guard (cross-source dispersion)</p> <p>Compute dispersion on accepted A before final p:</p> <p>mid = MEDIAN(A)</p> <p>maxDevBps = PARAM_ORACLE_MAX_DEVIATION_BPS</p> <p>For each a in A: devBps = abs(a - mid) * 10_000 / mid</p> <p>If any devBps &gt; maxDevBps \u2192 unhealthy (reject output p)</p> <p>5) Output</p> <p>Return struct:</p> <p>price = p (signed int)</p> <p>decimals = d_p</p> <p>healthy = (n &gt; 0) AND (deviation guard passes)</p> <p>updatedAt = min(updatedAt_i across accepted sources)</p> <p>6) Re-read/Snapshot</p> <p>PSM quotes MUST:</p> <p>Use a snapshot (p, updatedAt, healthy) taken at quote time, or</p> <p>Enforce re-read at exec and assert equality within strict rules.</p> <p>7) Examples &amp; Vectors</p> <p>See tests/vectors/oracle_guard_vectors.json for exact cases (stale, outlier, trimmed).</p>"},{"location":"ORACLE_TEST_GUIDE/","title":"ORACLE TEST GUIDE","text":"<p>Oracle Test Guide \u2014 Aggregation &amp; Guards</p> <p>Unit tests</p> <p>Normalization: ensure decimals conversion to d_p exact with floor.</p> <p>Staleness: reject when now - updatedAt &gt; MAX_AGE_SEC.</p> <p>Non-positive: reject price &lt;= 0.</p> <p>Aggregation</p> <p>MEDIAN with odd/even n cases.</p> <p>TRIMMED_MEAN with t=1 and n&gt;=3; fallback to MEDIAN when n &lt; 2*t+1.</p> <p>Deviation</p> <p>Compute mid as MEDIAN(A); assert any |a-mid|/mid * 10_000 &gt; maxDeviationBps flips healthy=false.</p> <p>Ensure dispersion check runs on accepted sources only.</p> <p>Health output</p> <p>healthy = accepted&gt;0 &amp;&amp; deviation-ok.</p> <p>updatedAt = min(updatedAt_i among accepted).</p> <p>Fuzz</p> <p>Random prices around baseline with occasional outliers; random staleness.</p> <p>Ensure no panics with large values and mixed decimals.</p>"},{"location":"PARAMETER_KEYS/","title":"Canonical Parameter Keys (Reference)","text":"<p>Status: Info (no code). Language: EN.</p> <p>These keys are used with <code>ParameterRegistry</code> (<code>bytes32</code> keys). Values are set via governance (later Timelock).</p>"},{"location":"PARAMETER_KEYS/#global","title":"Global","text":"<ul> <li><code>PARAM_PSM_FEE_BPS</code> \u2014 uint: PSM fee in basis points (e.g., 10 = 0.10%)</li> <li><code>PARAM_ORACLE_MAX_AGE_SEC</code> \u2014 uint: max age for oracle data (seconds)</li> <li><code>PARAM_ORACLE_MAX_DEVIATION_BPS</code> \u2014 uint: allowed deviation between sources</li> <li><code>PARAM_RATE_WINDOW_SEC</code> \u2014 uint: sliding-window length for rate-limits</li> <li><code>PARAM_RATE_MAX_AMOUNT</code> \u2014 uint: gross flow cap in window (chain-native decimals for 1kUSD)</li> <li><code>PARAM_TREASURY_ADDRESS</code> \u2014 address: destination for fees (via Vault spend path)</li> <li><code>PARAM_EMERGENCY_GUARDIAN</code> \u2014 address: temporary guardian (sunset later)</li> </ul>"},{"location":"PARAMETER_KEYS/#per-asset-hashed-with-asset-address","title":"Per-Asset (hashed with asset address)","text":"<ul> <li><code>PARAM_CAP_PER_ASSET</code> \u2014 uint: storage cap per collateral asset (token decimals)</li> <li><code>PARAM_TOKEN_SUPPORTED</code> \u2014 bool: allow-list toggle per token (PSM/Vault)</li> <li><code>PARAM_DECIMALS_HINT</code> \u2014 uint: optional decimals hint for off-standard ERC-20</li> </ul>"},{"location":"PARAMETER_KEYS/#derived-keys-examples","title":"Derived Keys (examples)","text":"<ul> <li><code>keccak256(\"PARAM_CAP_PER_ASSET\", asset)</code> for a per-asset cap</li> <li><code>keccak256(\"PARAM_TOKEN_SUPPORTED\", asset)</code> for support toggle</li> </ul> <p>Keep key names stable. Changes require a migration note and SDK update.</p>"},{"location":"PARAMETER_REGISTRY/","title":"Parameter Registry","text":"<p>Parameter Registry \u2014 Final (v1)</p> <p>Purpose</p> <p>Canonical on-chain key\u2192value map for protocol parameters.</p> <p>Read-only for modules; writes performed via DAO/Timelock executor.</p> <p>Access Patterns</p> <p>Uint params: getUint(bytes32 key) \u2192 uint256</p> <p>Address params: getAddress(bytes32 key) \u2192 address</p> <p>Key derivation (per-asset): keccak256(abi.encodePacked(KEY, asset))</p> <p>Update Flow</p> <p>Proposal created in DAO with key/value changes</p> <p>Timelock delay elapses</p> <p>Executor writes new values; events emitted on-chain</p> <p>Off-chain indexer mirrors changes with block number + timestamp</p> <p>Guards</p> <p>SafetyAutomata may READ params but not write</p> <p>Param ranges validated inside writer (executor), not in Registry</p> <p>References</p> <p>Interface: contracts/interfaces/IParameterRegistry.sol</p> <p>Keys catalog: docs/PARAM_KEYS_CATALOG.md</p> <p>JSON schema + samples: schemas/params.schema.json, tests/vectors/params.sample.json</p>"},{"location":"PARAM_KEYS_CANON/","title":"Canonical Parameter Keys (bytes32) \u2014 v1","text":"<p>Status: Docs. Audience: Core devs, SDK authors, ops. Goal: Single source of truth for on-chain parameter keys and derivation rules.</p>"},{"location":"PARAM_KEYS_CANON/#1-global-keys-fixed-strings","title":"1) Global Keys (fixed strings)","text":"Key Name Seed String Type Notes PARAM_PSM_FEE_BPS \"PARAM_PSM_FEE_BPS\" uint256 Fee in basis points (0..10000) PARAM_TREASURY_ADDRESS \"PARAM_TREASURY_ADDRESS\" address Treasury receiver (Timelock-controlled) PARAM_ORACLE_MAX_AGE_SEC \"PARAM_ORACLE_MAX_AGE_SEC\" uint256 Max allowed staleness PARAM_ORACLE_MAX_DEVIATION_BPS \"PARAM_ORACLE_MAX_DEVIATION_BPS\" uint256 Max deviation across sources PARAM_RATE_WINDOW_SEC \"PARAM_RATE_WINDOW_SEC\" uint256 Sliding window for rate limits PARAM_GUARDIAN_SUNSET_TS \"PARAM_GUARDIAN_SUNSET_TS\" uint256 Guardian sunset timestamp PARAM_DECIMALS_PAD_USD \"PARAM_DECIMALS_PAD_USD\" uint256 USD normalization pad (e.g., 18) <p>Derive bytes32 as: <code>keccak256(bytes(Seed String))</code>.</p>"},{"location":"PARAM_KEYS_CANON/#2-asset-scoped-keys-composite","title":"2) Asset-Scoped Keys (composite)","text":"<p>Use ABI-encoded derivation: key = keccak256(abi.encodePacked(\"PARAM_CAP_PER_ASSET\", asset));</p> <p>sql Code kopieren | Key Family | Seed Prefix | Type | Example | |---|---|---|---| | CAP per asset | \"PARAM_CAP_PER_ASSET\" | uint256 | Max vault balance for asset | | DECIMALS hint | \"PARAM_DECIMALS_HINT\" | uint256 | Advisory only (SDK fallback) | | RATE max amount | \"PARAM_RATE_MAX_AMOUNT\" | uint256 | Max gross flow per window (token units) | | PSM enabled | \"PARAM_PSM_ASSET_ENABLED\" | uint256/bool | 1 = enabled; 0 = disabled |</p> <p>Rule: Always use <code>abi.encodePacked(prefix, asset)</code> with lower-cased EVM address (Solidity addresses are already canonical).</p>"},{"location":"PARAM_KEYS_CANON/#3-module-addresses-wiring","title":"3) Module Addresses (wiring)","text":"Key Name Seed String Type ADDR_PSM \"ADDR_PSM\" address ADDR_VAULT \"ADDR_VAULT\" address ADDR_ORACLE \"ADDR_ORACLE\" address ADDR_TOKEN_1KUSD \"ADDR_TOKEN_1KUSD\" address ADDR_SAFETY \"ADDR_SAFETY\" address ADDR_REGISTRY \"ADDR_REGISTRY\" address"},{"location":"PARAM_KEYS_CANON/#4-versioning-backward-compatibility","title":"4) Versioning &amp; Backward Compatibility","text":"<ul> <li>Adding new keys: append-only; never change existing seeds.</li> <li>Deprecation: keep old keys live; introduce <code>..._V2</code> seeds as needed.</li> <li>SDKs must expose <code>deriveCompositeKey(prefix, asset)</code> helper.</li> </ul>"},{"location":"PARAM_KEYS_CANON/#5-testing-notes","title":"5) Testing Notes","text":"<ul> <li>Fuzz: no collisions across key families for random addresses.</li> <li>Invariants: registry read returns default (0/address(0)) if unset.</li> </ul>"},{"location":"PARAM_KEYS_CATALOG/","title":"PARAM KEYS CATALOG","text":"<p>Parameter Keys Catalog (v1)</p> <p>Global (bytes32)</p> <p>PARAM_TREASURY_ADDRESS</p> <p>PARAM_PSM_FEE_BPS</p> <p>PARAM_ORACLE_MAX_AGE_SEC</p> <p>PARAM_ORACLE_MAX_DEVIATION_BPS</p> <p>PARAM_RATE_WINDOW_SEC</p> <p>PARAM_RATE_MAX_AMOUNT</p> <p>PARAM_SAFETY_GUARDIAN_SUNSET_TS</p> <p>Per-asset (composite key via keccak256(KEY, asset))</p> <p>PARAM_CAP_PER_ASSET</p> <p>PARAM_MIN_LIQUIDITY_USD</p> <p>PARAM_MAX_SLIPPAGE_BPS</p> <p>PARAM_ASSET_DECIMALS_CACHE</p> <p>Notes</p> <p>Fee basis points range: [0,10000]</p> <p>Deviation basis points range: [0,10000]</p> <p>Windows in seconds; amounts in raw token units unless stated USD</p>"},{"location":"PSM_QUOTE_EXEC_ALIGNMENT/","title":"PSM QUOTE EXEC ALIGNMENT","text":"<p>PSM Quote/Exec Alignment \u2014 Executable Invariants (v1)</p> <p>Language: EN. Status: Normative + tooling.</p> <p>Objective Ensure execution-time outputs (gross, fee, net) exactly match quote-time semantics for identical inputs and snapshot assumptions (see docs/PSM_QUOTE_MATH.md, docs/ROUNDING_RULES.md).</p> <p>Scope</p> <p>Deterministic arithmetic: floor at each division; fee charged in in/out asset.</p> <p>Snapshot consistency: same DU/D_in/D_out and feeBps.</p> <p>Exec guards do not alter amounts (only allow/revert).</p> <p>Invariants I-QE-1: quoteTo1kUSD(amountIn, D_in, feeBps) == execTo1kUSD(amountIn, D_in, feeBps) amounts. I-QE-2: quoteFrom1kUSD(amountIn1k, D_out, feeBps) == execFrom1kUSD(amountIn1k, D_out, feeBps) amounts. I-QE-3: Fee conservation \u2014 fee is added to the correct asset fee-bucket without changing netOut. I-QE-4: Rounding \u2014 divisions are floored, never rounded up.</p> <p>Verification Tooling</p> <p>scripts/psm-crosscheck.mjs reads tests/vectors/psm_quote_vectors.json.</p> <p>Re-computes amounts using the exact same integer math as the PSM formulae.</p> <p>Emits JSON report with pass/fail per vector and a summary.</p> <p>Outputs</p> <p>reports/psm_quote_exec_report.json (machine-readable)</p> <p>reports/psm_quote_exec_summary.txt (human-readable)</p>"},{"location":"PSM_QUOTE_MATH/","title":"PSM QUOTE MATH","text":"<p>PSM Quote Math (v1)</p> <p>Status: Normative. Language: EN.</p> <p>1) Symbols</p> <p>feeBps \u2208 [0,10000]</p> <p>Q = quote()</p> <p>DU = decimals(1kUSD) = 18</p> <p>D_in = decimals(tokenIn)</p> <p>D_out = decimals(tokenOut)</p> <p>2) swapTo1kUSD (tokenIn -&gt; 1kUSD)</p> <p>Inputs: amountIn (tokenIn units), feeBps Steps:</p> <p>fee = floor(amountIn * feeBps / 10_000)</p> <p>netIn = amountIn - fee</p> <p>grossOut_1k = netIn * 10^(DU) / 10^(D_in)</p> <p>netOut_1k = grossOut_1k Output: (grossOut = grossOut_1k, fee_tokenIn = fee, netOut = netOut_1k)</p> <p>Notes:</p> <p>Fee is taken in tokenIn.</p> <p>No rounding upward on user amounts; floor at each division.</p> <p>3) swapFrom1kUSD (1kUSD -&gt; tokenOut)</p> <p>Inputs: amountIn_1k (1kUSD units), feeBps Steps:</p> <p>grossOut_token = amountIn_1k * 10^(D_out) / 10^(DU)</p> <p>fee = floor(grossOut_token * feeBps / 10_000)</p> <p>netOut_token = grossOut_token - fee Output: (grossOut = grossOut_token, fee_tokenOut = fee, netOut = netOut_token)</p> <p>Notes:</p> <p>Fee is taken in tokenOut.</p> <p>Floor rounding at each division preserves conservative outputs.</p> <p>4) Slippage &amp; MinOut</p> <p>Execution MUST check: netOut &gt;= minOut or revert SLIPPAGE.</p> <p>minOut provided by user/off-chain router.</p> <p>5) Sanity with Oracles (advisory)</p> <p>Quotes do not require price feeds; Oracle is advisory for deviation/liveness guards.</p> <p>Indexer may compute USD equivalents off-chain using oracle snapshots.</p> <p>6) Event Semantics</p> <p>FeeAccrued(asset, fee) reflects units of the asset the fee was taken in.</p> <p>SwapTo1kUSD: (user, tokenIn, amountIn, fee, netOut)</p> <p>SwapFrom1kUSD: (user, tokenOut, amountIn, fee, netOut)</p> <p>7) Edge Cases</p> <p>amountIn == 0 \u2192 revert ZERO_AMOUNT</p> <p>feeBps == 10_000 \u2192 netOut == 0 (allowed if governance decides; generally avoid)</p> <p>Decimal paths: all scale conversions use integer math; no floating points.</p> <p>8) Validation</p> <p>Cross-check with tests/vectors/psm_quote_vectors.json via scripts/quote-eval.ts</p>"},{"location":"PSM_QUOTE_SEMANTICS/","title":"PSM Quote Semantics \u2014 Fees &amp; Rounding (Future-Proof)","text":"<p>Status: Spec/Docs (no code). Audience: Core devs, SDK authors, auditors. Scope: Defines how <code>quoteTo1kUSD</code> / <code>quoteFrom1kUSD</code> normalize decimals, apply fees, and round. Applies when swaps are implemented (quotes MUST mirror execution exactly).</p>"},{"location":"PSM_QUOTE_SEMANTICS/#1-inputs-decimals-normalization","title":"1) Inputs, Decimals &amp; Normalization","text":"<ul> <li>Inputs</li> <li><code>tokenIn</code> / <code>tokenOut</code>: ERC-20 address (may be 6 or 18 decimals; fee-on-transfer tokens are not supported).</li> <li><code>amountIn</code>: amount in token decimals (uint256).</li> <li>Decimals</li> <li><code>tokenDecimals = decimals(token)</code></li> <li><code>oneKUSDec = 18</code> (1kUSD has 18 decimals)</li> <li>Normalization</li> <li>Convert <code>amountIn</code> \u2192 USD-basis via oracle:<ul> <li><code>priceUSD</code> = OracleAggregator.getPrice(token).price (units: USD with <code>priceDecimals</code>)</li> <li>Use integer math:  </li> <li><code>amountUSD = amountIn * priceUSD * 10^(USD_DECIMALS_PAD) / 10^tokenDecimals / 10^priceDecimals</code></li> <li>USD_DECIMALS_PAD: chosen to avoid precision loss; implementation MUST document it (e.g., 18).</li> </ul> </li> <li>Downstream rounding rule (normative)</li> <li>Conservative towards user on quotes:<ul> <li>For mint (<code>to 1kUSD</code>): round down output (floor).</li> <li>For redeem (<code>from 1kUSD</code>): round up fees and down net output.</li> </ul> </li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#2-fees-model-parameterized","title":"2) Fees Model (parameterized)","text":"<ul> <li>Global parameter: <code>PARAM_PSM_FEE_BPS</code> (0..10000).</li> <li>Gross/Net</li> <li><code>grossOut</code> (pre-fee) = normalized output before fee.</li> <li><code>fee = ceil(grossOut * feeBps / 10_000)</code></li> <li><code>netOut = grossOut - fee</code></li> <li>Direction</li> <li>Same fee policy for both directions by default.</li> <li>Registry MAY define per-asset or per-direction overrides later (must keep backward compatibility).</li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#3-quote-functions-spec","title":"3) Quote Functions (spec)","text":""},{"location":"PSM_QUOTE_SEMANTICS/#31-quoteto1kusdtokenin-amountin-grossout-fee-netout","title":"3.1 <code>quoteTo1kUSD(tokenIn, amountIn) \u2192 (grossOut, fee, netOut)</code>","text":"<ul> <li>Meaning: mint 1kUSD using <code>tokenIn</code>.</li> <li>Steps:</li> <li>Validate <code>tokenIn</code> supported (PSM &amp; Vault &amp; Safety OK).</li> <li>Read oracle price; fail if <code>!healthy</code> or stale/deviation per policy.</li> <li>Normalize to 1kUSD(18):<ul> <li><code>grossOut = floor(amountUSD * 10^18 / 10^USD_DECIMALS)</code></li> </ul> </li> <li><code>fee = ceil(grossOut * feeBps / 10_000)</code></li> <li><code>netOut = grossOut - fee</code></li> <li>Rounding guarantees:</li> <li>No over-issuance: <code>netOut &lt;= economicAmountMintable</code>.</li> <li>Deterministic integer math; no hidden casts.</li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#32-quotefrom1kusdtokenout-amountin-grossout-fee-netout","title":"3.2 <code>quoteFrom1kUSD(tokenOut, amountIn) \u2192 (grossOut, fee, netOut)</code>","text":"<ul> <li>Meaning: redeem 1kUSD to <code>tokenOut</code>.</li> <li>Steps:</li> <li>Validate <code>tokenOut</code> supported; oracle healthy.</li> <li>Convert 1kUSD(18) to USD, then to <code>tokenOut(decimals)</code>:<ul> <li><code>grossOut = floor(amountUSD * 10^tokenDecimals / priceUSDAdj)</code></li> </ul> </li> <li>Fee in tokenOut units:<ul> <li><code>fee = ceil(grossOut * feeBps / 10_000)</code></li> </ul> </li> <li><code>netOut = grossOut - fee</code></li> <li>Rounding guarantees:</li> <li>No under-collateralization from math drift.</li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#4-edge-cases-guards","title":"4) Edge Cases &amp; Guards","text":"<ul> <li>Zero/Small amounts: if normalization \u2192 0 netOut, return <code>(grossOut, fee, netOut)</code> with zeros; SDKs should gray out CTA.</li> <li>Decimals mismatch: must use token-decimals from on-chain; optional <code>PARAM_DECIMALS_HINT</code> is advisory only.</li> <li>Oracle guards: reject if <code>!healthy</code>, stale (<code>updatedAt</code> too old), or deviation &gt; threshold.</li> <li>Paused: reject when SafetyAutomata marks PSM paused.</li> <li>Unsupported tokens: revert <code>UNSUPPORTED_ASSET</code>.</li> <li>Fee=0: allowed; still apply rounding policy.</li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#5-examples-worked","title":"5) Examples (worked)","text":"<p>Assume <code>feeBps=10</code> (0.10%), <code>USDC.decimals=6</code>, <code>1kUSD.decimals=18</code>, oracle <code>USDC/USD = 1.000000 (6 decimals)</code>.</p> <ul> <li>To 1kUSD: <code>amountIn = 100_000_000</code> (100 USDC)</li> <li>Normalize \u2192 <code>grossOut = 100 * 1e18</code></li> <li><code>fee = ceil(100e18 * 10 / 10000) = ceil(0.01e18) = 10^16</code></li> <li> <p><code>netOut = 100e18 - 10^16</code></p> </li> <li> <p>From 1kUSD: <code>amountIn = 100e18</code></p> </li> <li>Normalize \u2192 <code>grossOut = floor(100 * 1e6) = 100_000_000</code></li> <li><code>fee = ceil(100_000_000 * 10 / 10000) = 10_000</code></li> <li><code>netOut = 99_990_000</code> (USDC units)</li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#6-invariants-must-hold","title":"6) Invariants (must hold)","text":"<ul> <li>I1 Supply Bound: Vault USD value \u2265 1kUSD supply (including pending fees).</li> <li>I2 Conservation: Quote + Exec produce identical <code>(gross, fee, net)</code> for same inputs within a block.</li> <li>I3 Monotonicity: Increasing <code>amountIn</code> must not decrease <code>netOut</code> (piecewise linear with fee ceiling).</li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#7-sdk-notes","title":"7) SDK Notes","text":"<ul> <li>Always display units/decimals clearly; format using token decimals.</li> <li>Show <code>(gross, fee, net)</code> explicitly; never recompute fee client-side.</li> <li>Cache addresses/params from <code>ops/config/*.json</code>; re-read on updates.</li> </ul>"},{"location":"PSM_QUOTE_SEMANTICS/#8-migration-compatibility","title":"8) Migration / Compatibility","text":"<ul> <li>Any change to fee policy or rounding requires a minor version bump in RPC interface docs and a CHANGELOG entry.</li> <li>Contracts MUST expose a <code>version()</code> or emit an upgrade event when behavior changes.</li> </ul>"},{"location":"PSM_QUOTE_TEST_VECTORS/","title":"PSM QUOTE TEST VECTORS","text":"<p>PSM Quote Test Vectors \u2014 Usage</p> <p>Files:</p> <p>tests/vectors/psm_quote_vectors.json \u2014 machine-readable cases (du=18)</p> <p>docs/PSM_QUOTE_MATH.md \u2014 normative math &amp; rounding</p> <p>Guidelines:</p> <p>Unit tests MUST assert equality with these vectors (grossOut, feeOut, netOut, feeAsset when applicable).</p> <p>Invariants should fuzz around these baselines (vary decimals, prices, fees).</p> <p>Any change to math requires: update docs, vectors, and a CHANGELOG entry.</p>"},{"location":"PSM_REVERTS/","title":"PSM REVERTS","text":"<p>PSM Revert Reasons \u2014 Normative Catalog (v1)</p> <p>All errors are custom errors (Solidity) and ABI-stable.</p> <p>UNSUPPORTED_ASSET \u2014 Asset not whitelisted by PSM and/or Vault.</p> <p>PAUSED \u2014 Module paused by SafetyAutomata/DAO.</p> <p>ORACLE_STALE \u2014 Oracle snapshot older than allowed maxAgeSec.</p> <p>ORACLE_UNHEALTHY \u2014 Aggregation failed (no healthy sources).</p> <p>DEVIATION_EXCEEDED \u2014 Source deviation beyond maxDeviationBps.</p> <p>CAP_EXCEEDED \u2014 Safety cap headroom exceeded for asset/system.</p> <p>INSUFFICIENT_LIQUIDITY \u2014 Vault cannot satisfy netOut + fee.</p> <p>SLIPPAGE \u2014 netOut &lt; minOut at execution time.</p> <p>ACCESS_DENIED \u2014 Caller lacks required role.</p> <p>ZERO_AMOUNT \u2014 amountIn or amountIn1k equals zero.</p> <p>Mapping to flows:</p> <p>Quotes never revert for oracle reasons (advisory); swaps do.</p> <p>CEI order must ensure deposit-before-mint and burn-before-withdraw.</p>"},{"location":"PSM_SWAP_EXECUTION_PLAN/","title":"PSM Swap Execution Plan (Spec)","text":"<p>Status: Spec/Docs (no code). Audience: Core devs, auditors, SDK. Scope: Defines execution-time behavior for PSM swaps after quotes are available (post DEV40). Covers CEI, guards, Vault interactions, fees, and events.</p>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#1-design-principles","title":"1) Design Principles","text":"<ul> <li>CEI (Checks-Effects-Interactions) must be strictly enforced.</li> <li>No reentrancy via <code>nonReentrant</code> (or equivalent guard).</li> <li>Determinism: Execution must mirror the Quote exactly (same block/oracle snapshot).</li> <li>Pull-accounting: The PSM interacts only with <code>CollateralVault</code> for asset movements.</li> </ul>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#2-pre-checks-common","title":"2) Pre-checks (common)","text":"<ol> <li>Safety: <code>safety.isPaused(MODULE_ID) == false</code>.</li> <li>Whitelist: PSM <code>isSupported(token)</code> and Vault <code>isAssetSupported(token)</code>.</li> <li>Oracle: <code>Oracle.getPrice(token)</code> \u2192 <code>healthy == true</code>, <code>updatedAt &lt;= MAX_AGE</code>, deviation within limits.</li> <li>Params: <code>feeBps = registry.getUint(PARAM_PSM_FEE_BPS)</code>.</li> <li>Deadline: <code>deadline &gt;= block.timestamp</code>.</li> <li>Slippage: <code>netOut &gt;= minOut</code> (after fees) or revert <code>SLIPPAGE</code>.</li> </ol> <p>Snapshot: A consistent oracle snapshot MUST be used for Quote &amp; Exec. Either (a) Quote returns a snapshot ID echoed by Exec, or (b) Exec re-reads and validates identical values/bounds.</p>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#3-swapto1kusdtokenin-amountin-to-minout-deadline","title":"3) <code>swapTo1kUSD(tokenIn, amountIn, to, minOut, deadline)</code>","text":"<p>A. Checks - Run the common pre-checks above. - User must grant PSM <code>allowance(tokenIn) &gt;= amountIn</code> (prepared off-chain).</p> <p>B. Effects (state) - Compute <code>(grossOut, fee, netOut)</code> per Quote rules (see <code>docs/PSM_QUOTE_SEMANTICS.md</code>). - Do not increase 1kUSD supply before assets are confirmed in the Vault. - Emit <code>FeeAccrued</code> only after successful accounting.</p> <p>C. Interactions 1. Ingress: <code>safeTransferFrom(user -&gt; Vault, amountIn)</code>    - Use <code>Vault.deposit(tokenIn, user, amountIn)</code> so FoT-guard &amp; caps apply. 2. Mint: <code>OneKUSD.mint(to, netOut)</code> (PSM holds MINTER role). 3. Fees: Either <code>Vault.deposit(tokenIn, address(this), fee)</code> or accrual:    - Recommended: PSM accrues fees \u2192 <code>pendingFees[tokenIn] += fee</code> (tracked by Vault).</p> <p>D. Events - <code>SwapTo1kUSD(user, tokenIn, amountIn, fee, netOut, block.timestamp)</code> - Vault <code>Deposit</code>, Token <code>Transfer</code> (mint).</p> <p>E. Failure atomicity - If <code>deposit</code> fails \u2192 revert without mint. - If <code>mint</code> fails (should not) \u2192 revert the entire transaction.</p>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#4-swapfrom1kusdtokenout-amountin-to-minout-deadline","title":"4) <code>swapFrom1kUSD(tokenOut, amountIn, to, minOut, deadline)</code>","text":"<p>A. Checks - Run the common pre-checks with <code>tokenOut</code>. - User must have 1kUSD <code>allowance(PSM) &gt;= amountIn</code>.</p> <p>B. Effects - Compute <code>(grossOut, fee, netOut)</code> in tokenOut units.</p> <p>C. Interactions 1. Burn ingress: <code>OneKUSD.burn(user, amountIn)</code> (PSM holds BURNER role). 2. Egress: <code>Vault.withdraw(tokenOut, to, netOut, \"PSM_REDEEM\")</code>. 3. Fees: Either immediate treasury withdrawal or accrual:    - Recommended: Accrue in Vault (<code>pendingFees[tokenOut] += fee</code>) and sweep later.</p> <p>D. Inventory &amp; headroom - Before <code>burn</code>, ensure <code>Vault.balanceOf(tokenOut) &gt;= netOut + fee</code>. Otherwise revert <code>INSUFFICIENT_LIQUIDITY</code>.</p> <p>E. Events - <code>SwapFrom1kUSD(user, tokenOut, amountIn, fee, netOut, block.timestamp)</code> - Token <code>Transfer</code> (burn), Vault <code>Withdraw</code>.</p>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#5-reentrancy-ordering","title":"5) Reentrancy &amp; Ordering","text":"<ul> <li>Guard PSM swap functions with <code>nonReentrant</code>.</li> <li>Order:</li> <li>To1k: Checks \u2192 Compute \u2192 <code>Vault.deposit</code> \u2192 <code>mint</code> \u2192 Fee accrual.</li> <li>From1k: Checks \u2192 Compute \u2192 <code>burn</code> \u2192 <code>Vault.withdraw(net)</code> \u2192 Fee accrual/sweep.</li> <li>No external callbacks in PSM/Vault (no hooks) to reduce attack surface.</li> </ul>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#6-errors-custom-errors","title":"6) Errors &amp; Custom Errors","text":"<ul> <li><code>UNSUPPORTED_ASSET</code>, <code>PAUSED</code>, <code>ORACLE_STALE</code>, <code>ORACLE_UNHEALTHY</code>, <code>DEVIATION_EXCEEDED</code>,   <code>CAP_EXCEEDED</code>, <code>INSUFFICIENT_LIQUIDITY</code>, <code>SLIPPAGE</code>, <code>ACCESS_DENIED</code>, <code>ZERO_ADDRESS</code>.</li> </ul>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#7-events-normative","title":"7) Events (normative)","text":"<ul> <li>PSM:</li> <li><code>SwapTo1kUSD(user, tokenIn, amountIn, fee, minted, ts)</code></li> <li><code>SwapFrom1kUSD(user, tokenOut, amountIn, fee, paidOut, ts)</code></li> <li>Vault:</li> <li><code>Deposit(asset, from, amount)</code>, <code>Withdraw(asset, to, amount, reason)</code>, <code>FeeSwept</code>.</li> </ul>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#8-invariants-execution","title":"8) Invariants (execution)","text":"<ul> <li>Consistency: Exec <code>(gross, fee, net)</code> equals Quote for the same inputs/snapshot.</li> <li>No mint/burn without corresponding Vault movement (or liquidity check).</li> <li>Fee conservation: Sum of fees per asset reaches Treasury bucket.</li> </ul>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#9-governance-roles","title":"9) Governance &amp; Roles","text":"<ul> <li>PSM requires <code>MINTER</code> and <code>BURNER</code> on 1kUSD.</li> <li>Treasury address from Registry (<code>PARAM_TREASURY_ADDRESS</code>).</li> <li>Fee BPS &amp; limits come from Registry; changeable only via Timelock.</li> </ul>"},{"location":"PSM_SWAP_EXECUTION_PLAN/#10-test-sketch-later","title":"10) Test Sketch (later)","text":"<ul> <li>Unit: fee/rounding, slippage, errors.</li> <li>Integration: deposit\u2192mint, burn\u2192withdraw, insufficient liquidity.</li> <li>Invariants: conservation, supply bound, monotonicity.</li> </ul>"},{"location":"PSM_VS_CDP/","title":"PSM vs CDP \u2014 Short Explainer","text":"<ul> <li>PSM (1kUSD): Parity engine; converts non-stable assets on ingress; no debt, no CR target; swaps gated by Safety/Oracle guards.</li> <li>CDP (e.g., DAI): Vaulted collateral, debt minting, liquidation mechanics, explicit CR targets.</li> </ul> <p>Operationally this means 1kUSD focuses on execution correctness, oracle freshness, and flow controls \u2014 not liquidation auctions or CR monitoring.</p>"},{"location":"ROUNDING_RULES/","title":"ROUNDING RULES","text":"<p>Rounding Rules (PSM) \u2014 Normative</p> <p>All divisions round DOWN (floor).</p> <p>Fees are computed in the asset they are charged in:</p> <p>To1k: fee in tokenIn</p> <p>From1k: fee in tokenOut</p> <p>Units conversion:</p> <p>tokenX \u2192 1kUSD: multiply by 10^(DU) then divide by 10^(D_in)</p> <p>1kUSD \u2192 tokenX: multiply by 10^(D_out) then divide by 10^(DU)</p> <p>Never round up user-facing netOut.</p> <p>Slippage checks occur on netOut after fees.</p> <p>Event amounts are emitted exactly as computed (no off-by-one normalization).</p>"},{"location":"SAFETY_GUARDIAN_CHECKLIST/","title":"Guardian Sunset Checklist (v1)","text":"<p>Status: Docs. Language: EN.</p>"},{"location":"SAFETY_GUARDIAN_CHECKLIST/#purpose","title":"Purpose","text":"<p>Define a clear, auditable path to decommission the temporary emergency guardian and hand off all controls to DAO Timelock.</p>"},{"location":"SAFETY_GUARDIAN_CHECKLIST/#preconditions","title":"Preconditions","text":"<ul> <li>\u2705 All core modules deployed and wired to <code>DAOTimelock</code> as <code>admin</code>.</li> <li>\u2705 ParameterRegistry keys populated via queued+executed Timelock ops.</li> <li>\u2705 SafetyAutomata pause tested (pause/unpause) across modules in staging.</li> <li>\u2705 OracleAggregator has no dev-only mocks on mainnet (or they are gated off).</li> <li>\u2705 Incident runbooks rehearsed (see <code>ops/runbooks/EMERGENCY_DRILLS.md</code>).</li> </ul>"},{"location":"SAFETY_GUARDIAN_CHECKLIST/#sunset-steps","title":"Sunset Steps","text":"<ol> <li>Freeze Guardian Powers (staging first):</li> <li>Disable any direct guardian ownerships; ensure only Timelock retains admin role.</li> <li>Verify: <code>admin</code> of Token/PSM/Vault/Oracle/Safety/Registry == <code>DAOTimelock</code>.</li> <li>Set Sunset Block/Timestamp:</li> <li>Publish exact block/timestamp and rationale in CHANGELOG.</li> <li>Queue Timelock transaction that revokes remaining guardian permissions at T+\u0394.</li> <li>Dry-Run Rehearsal:</li> <li>Simulate emergency pause/unpause via Timelock delay (no guardian).</li> <li>Verify no hidden code paths rely on guardian.</li> <li>Execute Sunset:</li> <li>Execute queued revocations.</li> <li>Confirm events and on-chain state: no guardian privileges remain.</li> <li>Post-Sunset Monitoring:</li> <li>Heightened monitoring for 7 days; verify no elevated error rates or failed governance actions.</li> </ol>"},{"location":"SAFETY_GUARDIAN_CHECKLIST/#evidence-to-archive","title":"Evidence to Archive","text":"<ul> <li>Timelock tx hashes (queue/execute).</li> <li>Module <code>AdminChanged</code> events (admin -&gt; Timelock).</li> <li>Screenshots/logs from dry-run and post-sunset monitoring.</li> </ul>"},{"location":"SAFETY_GUARDIAN_CHECKLIST/#rollback-if-needed","title":"Rollback (if needed)","text":"<ul> <li>Only via Timelock: queue temporary emergency policy (short-lived), with public disclosure and new sunset date.</li> </ul>"},{"location":"SAFETY_GUARDS_TESTPLAN/","title":"SAFETY GUARDS TESTPLAN","text":"<p>Safety Guards \u2014 Test Plan (v1)</p> <p>Status: Spec. Language: EN.</p> <p>Scope</p> <p>Rate-limit (sliding window) across modules and global scope</p> <p>Pause/Resume semantics per module via SafetyAutomata</p> <p>Guardian sunset: guardian can pause until sunsetTs; after that only DAO may pause</p> <p>Pass Criteria</p> <p>No state-changing op succeeds when paused</p> <p>Rate-limit enforces cumulative gross within window</p> <p>After sunsetTs, guardian actions revert GUARDIAN_EXPIRED</p>"},{"location":"SAFETY_PAUSE_MATRIX/","title":"Safety Pause Matrix (v1)","text":"<p>Status: Docs (normative). Audience: Core devs, dApp/SDK, ops.</p>"},{"location":"SAFETY_PAUSE_MATRIX/#purpose","title":"Purpose","text":"<p>Define which state-changing actions must be blocked when a module is paused by SafetyAutomata.</p>"},{"location":"SAFETY_PAUSE_MATRIX/#module-ids-canonical","title":"Module IDs (canonical)","text":"<ul> <li><code>PSM</code> \u2014 PegStabilityModule</li> <li><code>VAULT</code> \u2014 CollateralVault</li> <li><code>ORACLE</code> \u2014 OracleAggregator</li> <li><code>TOKEN</code> \u2014 OneKUSD (mint/burn only)</li> <li><code>REGISTRY</code> \u2014 ParameterRegistry</li> <li><code>GOV</code> \u2014 DAO/Timelock (execution paths) <p>Exact byte32 values: see <code>docs/MODULE_IDS.md</code>.</p> </li> </ul>"},{"location":"SAFETY_PAUSE_MATRIX/#matrix","title":"Matrix","text":"Module paused Blocked calls (non-exhaustive) Allowed reads PSM <code>swapTo1kUSD</code>, <code>swapFrom1kUSD</code> <code>quote*</code>, <code>isSupportedToken</code>, getters VAULT <code>deposit</code>, <code>withdraw</code>, <code>sweepFees</code> <code>balanceOf</code>, <code>isAssetSupported</code> ORACLE <code>setPriceMock</code> (dev), any mutating feed adapters <code>getPrice</code> (read-only) TOKEN <code>mint</code>, <code>burn</code> <code>transfer</code>, <code>approve</code>, <code>transferFrom</code>, views REGISTRY parameter set/update fns reads of parameters GOV (if applied) <code>execute()</code> fast-paths <code>queue()</code>, <code>read</code> (policy-dependent)"},{"location":"SAFETY_PAUSE_MATRIX/#rules","title":"Rules","text":"<ul> <li>Pausing PSM must be sufficient to halt mint/redeem flows (even if TOKEN is not paused).</li> <li>TOKEN pause gates only <code>mint/burn</code>, never user transfers (unless specified by governance policy).</li> <li>Reads are always allowed; no side effects.</li> </ul>"},{"location":"SAFETY_PAUSE_MATRIX/#event-consistency","title":"Event consistency","text":"<ul> <li><code>ModulePaused(moduleId, actor, reason, ts)</code></li> <li><code>ModuleUnpaused(moduleId, actor, ts)</code> Clients should reflect current pause state per module using SafetyAutomata getters.</li> </ul>"},{"location":"SAFETY_RATE_LIMITER/","title":"SAFETY RATE LIMITER","text":"<p>Safety Rate-Limiter \u2014 Rolling Window (v1)</p> <p>Status: Docs (normative). Language: EN. Audience: Core devs, auditors, SDK.</p> <p>0) Scope</p> <p>Enforces gross flow limits over a rolling window for sensitive actions:</p> <p>PSM: swapTo1kUSD (ingress) and swapFrom1kUSD (egress)</p> <p>Vault: deposit/withdraw (as needed)</p> <p>Per-asset and/or per-module limits</p> <p>1) Parameters</p> <p>windowSec \u2014 rolling window length (registry: PARAM_RATE_WINDOW_SEC)</p> <p>maxAmount[scope] \u2014 maximum gross amount over windowSec</p> <p>Scope can be: global, per-module, per-asset</p> <p>Values stored in token units (not USD)</p> <p>Clock source: block.timestamp</p> <p>2) Semantics</p> <p>Given an operation with amount, we must ensure:</p> <p>\u03a3 gross(amount) for ops with ts in (now - windowSec, now]  + amount  &lt;= maxAmount</p> <p>If violated \u2192 revert RATE_LIMIT_EXCEEDED.</p> <p>3) Data Structure (implementation hint)</p> <p>Use fixed-size time buckets to approximate sliding window with O(1) ops:</p> <p>bucketSecs = gcd-like small divisor of window (e.g., 60s)</p> <p>numBuckets = ceil(windowSec / bucketSecs)</p> <p>Circular buffer: each bucket record {sum, bucketStart}</p> <p>On update:</p> <p>Roll current index by (now / bucketSecs) % numBuckets</p> <p>If bucketStart != currentStart, reset sum=0; bucketStart=currentStart</p> <p>Sum all buckets with bucketStart &gt; now - windowSec</p> <p>Check sum + amount &lt;= maxAmount then add to current sum += amount</p> <p>This yields tight upper bound; exact sliding window allowed if gas permits.</p> <p>4) Scopes &amp; Keys</p> <p>Derive keys consistently (see PARAM_KEYS_CANON):</p> <p>per-asset: PARAM_RATE_MAX_AMOUNT + asset</p> <p>per-module: PARAM_RATE_MAX_AMOUNT + MODULE_ID</p> <p>global: PARAM_RATE_MAX_AMOUNT</p> <p>Evaluation order:</p> <p>If per-asset exists \u2192 enforce</p> <p>Else if per-module exists \u2192 enforce</p> <p>Else if global exists \u2192 enforce</p> <p>Missing key \u2192 unlimited (0 = unlimited) unless policy forbids</p> <p>5) Units &amp; Decimals</p> <p>Always store/enforce in token units (not USD).</p> <p>For 1kUSD limits, use du=18 units.</p> <p>6) Events (recommended)</p> <p>RateLimitUpdated(scopeKey, maxAmount, windowSec, ts)</p> <p>RateLimitHit(scopeKey, amountTried, sumWindow, maxAmount, ts) (optional)</p> <p>7) Errors</p> <p>RATE_LIMIT_EXCEEDED()</p> <p>INVALID_WINDOW() if windowSec == 0</p> <p>8) Invariants</p> <p>I6: Sliding-window gross flow \u2264 configured maxAmount for active scope.</p> <p>Rate-limit never blocks view functions; only state changes.</p> <p>9) Test Scenarios</p> <p>Burst under the cap: multiple ops sum &lt; max \u2192 pass</p> <p>Exactly at cap \u2192 pass</p> <p>Exceed by 1 unit \u2192 revert</p> <p>Buckets roll-over: old bucket drops, new ops allowed</p> <p>Mixed assets: enforce per-asset even if global allows more</p> <p>Window change at runtime: ensure next op re-evaluates with new config</p> <p>See tests/vectors/rate_limiter_vectors.json for machine-readable cases.</p>"},{"location":"SAFETY_RATE_LIMITER_TEST_GUIDE/","title":"SAFETY RATE LIMITER TEST GUIDE","text":"<p>Safety Rate-Limiter \u2014 Test Guide</p> <p>Harness</p> <p>Provide a mock limiter with configurable windowSec, bucketSecs, and maxAmount for different scopes.</p> <p>Deterministic time</p> <p>Use a controllable clock (e.g., vm.warp or setNextBlockTimestamp) to model timestamps; avoid dependence on block.timestamp drift.</p> <p>Assertions</p> <p>After each op, compute expected sum over (now - windowSec, now] and compare to limiter internal sum.</p> <p>On reject, assert revert RATE_LIMIT_EXCEEDED.</p> <p>Rollover</p> <p>Step time across multiple bucket boundaries; verify that old buckets are reset and no phantom volume persists.</p> <p>Config changes</p> <p>When maxAmount or windowSec changes at runtime, ensure next op re-evaluates against the new config.</p> <p>Fuzz</p> <p>Random op sequences with random gaps and sizes; invariant I6 must hold.</p>"},{"location":"SDK_EVENT_DECODERS/","title":"SDK EVENT DECODERS","text":"<p>SDK Event Decoders (TS)</p> <p>Status: Docs. Audience: SDK/dApp.</p> <p>Files:</p> <p>clients/sdk/events.ts \u2014 decoders for PSM/Vault/Token using canonical ABIs in /abi</p> <p>clients/examples/decode-events.ts \u2014 tiny usage example</p> <p>Usage (Node):</p> <p>Ensure ethers v6 and @noble/hashes dev deps are installed (already in package.json).</p> <p>Run example: node clients/examples/decode-events.ts</p>"},{"location":"SDK_WIRING_GUIDE/","title":"SDK Wiring Guide (TypeScript-first)","text":"<p>Status: Docs &amp; examples only. No builds.</p>"},{"location":"SDK_WIRING_GUIDE/#goals","title":"Goals","text":"<ul> <li>Load canonical addresses/params JSON.</li> <li>Minimal RPC: read-only quotes &amp; price reads.</li> <li>Keep code portable (node/browser).</li> </ul>"},{"location":"SDK_WIRING_GUIDE/#files","title":"Files","text":"<ul> <li>Addresses: ops/config/addresses.*.json</li> <li>Params: ops/config/params.*.json</li> <li>RPC: interfaces/RPC_API.md</li> <li>Events: interfaces/ONCHAIN_EVENTS.md</li> </ul>"},{"location":"SECURITY_PREAUDIT_README/","title":"SECURITY PREAUDIT README","text":"<p>Security Pre-Audit Pack (v1)</p> <p>Purpose: Provide auditors with a consistent, minimal, and reproducible bundle.</p> <p>Contents:</p> <p>Threat Model (docs/THREAT_MODEL.md)</p> <p>Static-Analysis Baselines (security/baselines/)</p> <p>Build/Run instructions (this file)</p> <p>Submission bundle script (scripts/make-preaudit-bundle.sh)</p> <p>Version manifest (security/submission/MANIFEST.json)</p> <p>How to use:</p> <p>Ensure repo compiles (forge or hardhat).</p> <p>Regenerate baselines (optional): scripts/gen-static-baselines.sh</p> <p>Create submission bundle: scripts/make-preaudit-bundle.sh v0.1.0</p> <p>Attach resulting ZIP from security/submission/</p>"},{"location":"STATUS/","title":"\ud83e\udded Projektstatus: 1kUSD \u2013 Kaspa Stablecoin","text":"<p>Letztes Update: $(date '+%Y-%m-%d %H:%M:%S')</p>"},{"location":"STATUS/#build-ci-status","title":"\ud83d\udce6 Build &amp; CI Status","text":"Workflow Status Beschreibung Foundry Tests \ud83d\udfe2 Bestanden Alle Solidity-Tests erfolgreich durchgelaufen Solidity CI \ud83d\udfe2 Bestanden Linting, Syntax und Kompilierung fehlerfrei Docs Deploy \ud83d\udfe2 Online GitHub Pages Deployment aktiv unter: neabouli.github.io/1kUSD"},{"location":"STATUS/#core-module-ubersicht","title":"\u2699\ufe0f Core Module \u00dcbersicht","text":"<p>\ud83d\udce6 contracts/core \u251c\u2500\u2500 \ud83d\udfe2 SafetyAutomata.sol \u2192 Modul-basiertes Pausensystem (per-module mapping, \u2705 getestet) \u251c\u2500\u2500 \ud83d\udfe2 PegStabilityModule.sol \u2192 PSM-Logik f\u00fcr Swaps 1kUSD \u2194 Collateral \u251c\u2500\u2500 \ud83d\udfe2 CollateralVault.sol \u2192 Verwaltung und Accounting von Collateral-Assets \u251c\u2500\u2500 \ud83d\udfe2 OracleAggregator.sol \u2192 Preis- und Feed-Aggregation f\u00fcr PSM / Vault \u251c\u2500\u2500 \ud83d\udfe2 ParameterRegistry.sol \u2192 Zentrale Governance-Parameter (Fees, Limits) \u2514\u2500\u2500 \ud83d\udfe2 DAO_Timelock.sol \u2192 Zeitverz\u00f6gerte Governance-Aktionen</p> <p>yaml Code kopieren</p>"},{"location":"STATUS/#testubersicht-foundry","title":"\ud83e\uddea Test\u00fcbersicht (Foundry)","text":"<ul> <li><code>TestSafetyNet.t.sol</code> \u2705  </li> <li><code>TestGuardianMonitor.t.sol</code> \u2705  </li> <li><code>MockOracleAggregator.sol</code> \u2705  </li> <li><code>MockSafetyAutomata.sol</code> \u2705  </li> </ul>"},{"location":"STATUS/#nachste-schritte","title":"\ud83e\uddf1 N\u00e4chste Schritte","text":"<ol> <li>\ud83d\udfe6 Refactor: Konsistente MixedCase-Benennung (Lint-Hinweise aus Forge-Lint).</li> <li>\ud83d\udfe6 Docs: <code>index.md</code> Fehler beheben \u2192 Hauptdokument fehlt im <code>nav</code>.</li> <li>\ud83d\udfe9 Optional: <code>foundry.toml</code> erweitern um Compiler-Optimierung (<code>optimizer_runs = 20000</code>).</li> <li>\ud83d\udfe2 CI-Ready: Pipeline voll funktionsf\u00e4hig \u2013 kann als Template f\u00fcr zuk\u00fcnftige Module verwendet werden.</li> </ol> <p>\u2705 Gesamtstatus: </p> <p>Das Projekt ist build-stabil, test-gr\u00fcn und dokumentiert. Alle OpenZeppelin-Imports werden korrekt aufgel\u00f6st, CI-Kette l\u00e4uft automatisch durch.</p>"},{"location":"THREAT_MODEL/","title":"THREAT MODEL","text":"<p>Threat Model \u2014 1kUSD (v1)</p> <p>Scope:</p> <p>On-chain contracts: OneKUSD, PSM, CollateralVault, OracleAggregator, SafetyAutomata, ParameterRegistry, DAO_Timelock</p> <p>Off-chain/ops surfaces (advisory): governance proposals, parameter releases, indexer read-only paths</p> <p>Assets:</p> <p>Collateral assets in Vault</p> <p>1kUSD token supply and peg integrity</p> <p>Governance authority (Timelock)</p> <p>Oracle integrity (aggregation guards)</p> <p>Adversaries:</p> <p>External attackers (smart contract exploits, oracle manipulation, MEV)</p> <p>Malicious counterparties (non-compliant ERC-20s, FoT tokens, decimals drift)</p> <p>Governance capture attempts (proposal batching, parameter griefing)</p> <p>Insider error (misconfig params, wrong caps/rate limits)</p> <p>Key Risks &amp; Controls (summary):</p> <p>Unauthorized mint/burn \u2192 Role-gated via PSM, Safety pause gates; invariants I1\u2013I4.</p> <p>Peg drift via mispriced oracle \u2192 Staleness/deviation guards; MEDIAN/trimmed-mean; exec snapshot.</p> <p>Vault accounting drift (FoT/decimals) \u2192 received-based deposit; fee accrual separation; vectors.</p> <p>Rate-limit bypass \u2192 rolling window limiter with scopes; events.</p> <p>Governance abuse \u2192 Timelock delay; param writes only; guardian sunset; runbooks.</p> <p>Reentrancy / CEI violations \u2192 nonReentrant; deposit-before-mint/burn-before-withdraw; no callbacks.</p> <p>ERC-20 quirks \u2192 adapter allowlist; decimals metadata; revert on unsupported.</p> <p>Assumptions:</p> <p>Oracles provide at least one healthy source most of the time.</p> <p>Treasury spend path only via Timelock; Vault has no arbitrary spend.</p> <p>Audit Questions Checklist:</p> <p>Are all state transitions evented with sufficient data?</p> <p>Is any USD math done outside PSM? (should be no)</p> <p>Are fee rounding and unit conversions consistent with vectors?</p> <p>Can pause or rate-limits be bypassed by alternative paths?</p> <p>Governance param changes: are ranges validated where needed?</p>"},{"location":"TOKEN_PAUSE_SEMANTICS/","title":"TOKEN PAUSE SEMANTICS","text":"<p>OneKUSD \u2014 Pause Semantics (Final v1)</p> <p>Policy:</p> <p>Pause affects only mint and burn. Regular ERC-20 transfer and transferFrom remain allowed.</p> <p>pause() / unpause() are governed by Safety/DAO. Guardian may only pause (if policy set) and only before sunset.</p> <p>Normative Rules:</p> <p>paused == true \u21d2 mint() and burn() MUST revert PAUSED().</p> <p>transfer* MUST NOT consult pause flag (ensures market liquidity during incidents).</p> <p>Events: Paused(by), Unpaused(by) are emitted on state change (idempotent-safe).</p> <p>Invariants: Supply changes (mint/burn) must be 0 while paused.</p> <p>Interplay:</p> <p>PSM swaps rely on mint/burn; pausing token effectively freezes PSM state changes while allowing normal transfers.</p> <p>SafetyAutomata remains the control-plane; token enforces local rule.</p>"},{"location":"TOKEN_PERMIT_SPEC/","title":"TOKEN PERMIT SPEC","text":"<p>OneKUSD \u2014 EIP-2612 Permit (Final Spec v1)</p> <p>Status: Normative doc. Language: EN.</p> <p>1) Objective</p> <p>Support gasless approvals via permit in compliance with EIP-2612. Nonces are per-owner. Signature is EIP-712 typed data.</p> <p>2) Domain (EIP-712)</p> <p>EIP712Domain fields (exact casing):</p> <p>name: \"OneKUSD\"</p> <p>version: \"1\"</p> <p>chainId: uint256 (runtime)</p> <p>verifyingContract: address (token address)</p> <p>Domain separator: DOMAIN_SEPARATOR = keccak256(abi.encode( keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"), keccak256(bytes(name)), keccak256(bytes(version)), chainId, address(this) ))</p> <p>MUST update dynamically if chainId changes (per EIP-2612 guidance) or implement EIP-5267 getter.</p> <p>3) Permit struct &amp; digest</p> <p>Type hash: PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")</p> <p>Struct (exact order/types):</p> <p>owner: address</p> <p>spender: address</p> <p>value: uint256</p> <p>nonce: uint256 (current nonce of owner)</p> <p>deadline: uint256 (unix seconds)</p> <p>Digest: digest = keccak256(\"\\x19\\x01\" || DOMAIN_SEPARATOR || keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonce, deadline)))</p> <p>4) Function</p> <p>function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;</p> <p>Rules:</p> <p>require(block.timestamp &lt;= deadline) (deadline inclusive).</p> <p>Recover signer; must equal owner.</p> <p>Nonce check: use nonces[owner] in struct; after success nonces[owner]++.</p> <p>Emit standard Approval(owner, spender, value).</p> <p>Set allowance to value (not add); mirrors OpenZeppelin ERC20Permit.</p> <p>5) Security &amp; Validations</p> <p>Malleability: enforce s in lower half order; v in {27,28}.</p> <p>Zero address: owner/spender can be zero if ERC-20 semantics allow (discouraged); keep parity with OZ.</p> <p>Replay protection: per-owner nonces only.</p> <p>Chain replay: protected by chainId in domain.</p> <p>Signature over empty deadline (0) is allowed only if explicitly documented; RECOMMENDED: require deadline &gt; 0.</p> <p>6) Views &amp; Events</p> <p>function nonces(address owner) external view returns (uint256)</p> <p>function DOMAIN_SEPARATOR() external view returns (bytes32)</p> <p>Events: standard Approval.</p> <p>7) Test Coverage</p> <p>Valid permit updates allowance; emits Approval; nonce increments.</p> <p>Expired deadline reverts.</p> <p>Wrong signer reverts.</p> <p>Replay (same sig) reverts due to nonce change.</p> <p>Domain separator correctness (matches off-chain EIP-712).</p> <p>ChainId change behavior (see EIP-2612 notes).</p> <p>8) References</p> <p>EIP-2612, EIP-712, OpenZeppelin ERC20Permit</p>"},{"location":"TOKEN_PERMIT_TEST_GUIDE/","title":"TOKEN PERMIT TEST GUIDE","text":"<p>OneKUSD Permit \u2014 Test Guide</p> <p>Domain separator</p> <p>Compare on-chain DOMAIN_SEPARATOR with ethers TypedDataEncoder.hashDomain(domain).</p> <p>Happy path</p> <p>nonce=0 \u2192 permit(...) with valid sig \u2192 allowance set, Approval emitted, nonce=1.</p> <p>Replay &amp; wrong nonce</p> <p>Reuse same sig \u2192 revert (nonce mismatch).</p> <p>Prepare sig with nonce=2 while on-chain nonce=0 \u2192 revert.</p> <p>Expiry</p> <p>deadline &lt; block.timestamp \u2192 revert.</p> <p>ECDSA checks</p> <p>Ensure s in lower half, v in {27,28}.</p> <p>Fuzz</p> <p>Random owners/spenders/values; ensure no state corruption and nonces monotonic.</p>"},{"location":"VAULT_ACCOUNTING/","title":"VAULT ACCOUNTING","text":"<p>CollateralVault Accounting (v1)</p> <p>Status: Normative. Language: EN.</p> <p>1) Goals</p> <p>Correct per-asset balances under mixed decimals (6/8/18).</p> <p>Fee-on-transfer (FoT) tokens handled via received-amount accounting.</p> <p>Separate fee accrual bucket per asset (pendingFees[asset]).</p> <p>No direct asset custody by Safety/DAO; Vault is the source of truth.</p> <p>2) Deposit (Ingress)</p> <p>Input: asset, from, amount (requested) Steps:</p> <p>Before: bal0 = balanceOf(asset, Vault)</p> <p>TransferFrom(from -&gt; Vault, amount) (MUST use safe wrapper)</p> <p>After: bal1 = balanceOf(asset, Vault)</p> <p>received = bal1 - bal0</p> <p>Require: received &gt; 0 (else revert FOT_ZERO_RECEIVED)</p> <p>Increase internal ledger by received; emit Deposit(asset, from, received)</p> <p>3) Withdraw (Egress)</p> <p>Input: asset, to, amount, reason</p> <p>Require: ledger[asset] - pendingFees[asset] &gt;= amount</p> <p>Transfer(Vault -&gt; to, amount)</p> <p>Decrease ledger; emit Withdraw(asset, to, amount, reason)</p> <p>4) Fee Accrual</p> <p>To1k path: PSM takes fees in tokenIn \u2192 prefer track in PSM then sweep \u2192 OR: Vault.accumulateFee(asset, fee) to bump pendingFees[asset].</p> <p>From1k path: fee in tokenOut \u2192 Vault.accumulateFee(asset, fee) before transfer.</p> <p>Sweep: Vault.sweepFees(asset, treasury) moves pendingFees and zeroes bucket; emit FeeSwept(asset, amount).</p> <p>5) Decimals &amp; Units</p> <p>Ledger stores raw token units as-is (no normalization).</p> <p>Cross-asset math occurs off-chain or in PSM (1kUSD conversion).</p> <p>6) Invariants</p> <p>Vault ledger \u2265 on-chain ERC-20 balance (FoT can only reduce received, never inflate).</p> <p>\u03a3(pendingFees) \u2264 Vault ledger for each asset.</p> <p>Withdraw never exceeds ledger - pendingFees.</p> <p>7) Errors &amp; Events (normative)</p> <p>Errors: FOT_ZERO_RECEIVED, INSUFFICIENT_LIQUIDITY, FEE_OVERFLOW Events: Deposit(asset, from, amount), Withdraw(asset, to, amount, reason), FeeSwept(asset, amount)</p>"},{"location":"VAULT_ACCOUNTING_EDGE_CASES/","title":"VAULT ACCOUNTING EDGE CASES","text":"<p>Collateral Vault \u2014 Accounting Edge Cases (v1)</p> <p>Status: Docs (normative). Language: EN. Audience: Core devs, auditors, SDK.</p> <p>0) Scope</p> <p>Covers: fee-on-transfer (FoT) tokens, decimal mismatches (6 vs 18), caps &amp; headroom checks, and ingress/egress invariants.</p> <p>1) Ingress (deposit)</p> <p>Call: Vault.deposit(asset, from, amountIn)</p> <p>MUST pull amountIn via safeTransferFrom(from -&gt; vault).</p> <p>MUST read actual balance delta: pre = bal(asset, vault); transfer; post = bal(asset, vault); received = post - pre;</p> <p>If received &lt; amountIn (FoT), then:</p> <p>received is the authoritative deposit amount.</p> <p>PSM quotes MUST NOT rely on exact amountIn arriving; only To1k path uses deposit-before-mint CEI ensuring minted amount matches oracle USD of (received - feeAsset).</p> <p>MUST enforce cap after applying received:</p> <p>if (balance(asset) + received &gt; cap(asset)) revert CAP_EXCEEDED;</p> <p>MUST emit Deposit(asset, from, received) (not amountIn).</p> <p>2) Egress (withdraw)</p> <p>Call: Vault.withdraw(asset, to, amount, reason)</p> <p>MUST check liquidity: balance(asset) &gt;= amount.</p> <p>MUST emit Withdraw(asset, to, amount, reason) after state updates.</p> <p>MUST NOT apply FoT logic on egress (receiver-side FoT is external and out-of-scope).</p> <p>3) Fee accrual and sweep</p> <p>Accrue fees per-asset in vault storage: pendingFees[asset].</p> <p>FeeSwept(asset, to, amount) emitted for sweeps to treasury.</p> <p>Invariant: \u03a3 pendingFees + \u03a3 swept == \u03a3 accrued.</p> <p>4) Decimals and normalization</p> <p>Vault stores raw token units.</p> <p>All USD math is performed in PSM using oracle snapshot; vault never converts units.</p> <p>Indexers should apply decimals metadata for reporting only.</p> <p>5) Unsupported/changed tokens</p> <p>On isAssetSupported(asset) == false \u2192 deposits revert.</p> <p>If a token changes decimals or behavior (rare), governance MUST disable the asset, sweep balances, and rotate to a compliant wrapper.</p> <p>6) Invariants</p> <p>I1 Supply Bound: \u03a3USD(vault balances minus fees) \u2265 1kUSD total supply (snapshot-based, advisory).</p> <p>I5 Caps enforced on all ingress paths.</p> <p>Event parity: Deposit.received equals on-chain balance delta.</p> <p>7) Tests</p> <p>See tests/vectors/vault_edge_vectors.json for FoT and decimals cases.</p>"},{"location":"VAULT_ACCOUNTING_PLAN/","title":"Collateral Vault \u2014 Accounting Plan (Spec)","text":"<p>Status: Spec/Docs (no code). Audience: Core devs, auditors, SDK. Scope: Defines token-level accounting, deposits/withdrawals, fee flows, and decimals policy to implement later.</p>"},{"location":"VAULT_ACCOUNTING_PLAN/#1-goals-constraints","title":"1) Goals &amp; Constraints","text":"<ul> <li>Support multiple ERC-20 collaterals with potentially non-standard decimals (6/8/18).</li> <li>Deterministic integer math; no rounding that violates supply bound.</li> <li>Vault holds assets, not 1kUSD. Fees accrued in asset units (per-asset buckets).</li> <li>No fee-on-transfer tokens supported in v1.</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#2-state-model-per-asset","title":"2) State Model (per Asset)","text":"<p>For each <code>asset</code>: - <code>balances[asset]</code> \u2014 total units held by Vault (token decimals). - <code>pendingFees[asset]</code> \u2014 fees accrued, not yet swept to Treasury (token decimals). - <code>caps[asset]</code> \u2014 soft cap from <code>ParameterRegistry</code> (token decimals). - <code>supported[asset]</code> \u2014 mirror of toggle (PSM may have its own whitelist).</p> <p>Storage visibility via read-only functions: - <code>balanceOf(asset)</code> \u2192 <code>balances[asset]</code> - <code>feesPending(asset)</code> \u2192 <code>pendingFees[asset]</code></p>"},{"location":"VAULT_ACCOUNTING_PLAN/#3-deposits","title":"3) Deposits","text":"<p><code>deposit(asset, from, amount)</code> - Prechecks: Safety not paused; <code>supported[asset] = true</code>; <code>amount &gt; 0</code>; cap headroom. - Transfer: <code>safeTransferFrom(from, this, amount)</code>; revert if fee-on-transfer detected (see 3.1). - Accounting: <code>balances[asset] += amount</code>. - Events: <code>Deposit(asset, from, amount)</code>.</p>"},{"location":"VAULT_ACCOUNTING_PLAN/#31-fee-on-transfer-guard","title":"3.1 Fee-on-Transfer Guard","text":"<ul> <li>Read post-transfer balance delta; require <code>delta == amount</code>.  </li> <li>If <code>delta &lt; amount</code> \u2192 revert <code>FOT_NOT_SUPPORTED</code>.</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#4-withdrawals","title":"4) Withdrawals","text":"<p><code>withdraw(asset, to, amount, reason)</code> - Prechecks: Safety not paused; supported; <code>amount &gt; 0</code>; <code>balances[asset] &gt;= amount</code>. - Accounting: <code>balances[asset] -= amount</code>. - Transfer: <code>safeTransfer(to, amount)</code>. - Events: <code>Withdraw(asset, to, amount, reason)</code>.</p> <p><code>reason</code> (bytes32): <code>\"PSM_REDEEM\" | \"TREASURY_SPEND\" | \"MAINTENANCE\" | ...</code> The PSM uses <code>\"PSM_REDEEM\"</code>. Treasury sweeps use <code>\"TREASURY_SPEND\"</code>.</p>"},{"location":"VAULT_ACCOUNTING_PLAN/#5-fee-accrual-sweep","title":"5) Fee Accrual &amp; Sweep","text":"<ul> <li>PSM calculates fees in output asset units (per PSM Quote Spec).</li> <li>PSM calls <code>deposit(asset, PSM, fee)</code> or batches into a net deposit.</li> <li>Vault increments <code>pendingFees[asset] += fee</code>.</li> <li>DAO/Treasury later executes <code>sweepFees(asset, to)</code>:</li> <li>Prechecks: only Timelock admin; Safety OK.</li> <li>Transfer <code>pendingFees[asset]</code> to <code>to</code> and zero bucket.</li> <li>Event: <code>FeeSwept(asset, to, amount)</code>.</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#6-caps-headroom","title":"6) Caps &amp; Headroom","text":"<ul> <li><code>cap = registry.getUint(keccak256(\"PARAM_CAP_PER_ASSET\", asset))</code> (advisory in v1).</li> <li><code>headroom = cap == 0 ? MAX_UINT : cap - balances[asset]</code>.</li> <li>Deposits must satisfy <code>amount &lt;= headroom</code>.</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#7-decimals-policy","title":"7) Decimals Policy","text":"<ul> <li>Vault does not rescale asset balances. All stored in token decimals.</li> <li>Conversions happen in PSM using oracle &amp; decimals to 1kUSD(18).</li> <li>SDK must format amounts using token decimals from chain; registry <code>PARAM_DECIMALS_HINT</code> is advisory fallback.</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#8-invariants-to-test-later","title":"8) Invariants (to test later)","text":"<ul> <li>V1: <code>sum_i balances[i]*price[i] &gt;= totalSupply(1kUSD)</code> (USD terms).</li> <li><code>balances[asset] &gt;= pendingFees[asset]</code>.</li> <li>Monotonicity: deposits increase <code>balances[asset]</code>; withdrawals decrease.</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#9-errors-canonical","title":"9) Errors (canonical)","text":"<ul> <li><code>ASSET_NOT_SUPPORTED</code>, <code>CAP_EXCEEDED</code>, <code>INSUFFICIENT_BALANCE</code>, <code>FOT_NOT_SUPPORTED</code>,   <code>PAUSED</code>, <code>ACCESS_DENIED</code>, <code>ZERO_ADDRESS</code>, <code>INVALID_AMOUNT</code>.</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#10-events-canonical","title":"10) Events (canonical)","text":"<ul> <li><code>Deposit(asset, from, amount)</code></li> <li><code>Withdraw(asset, to, amount, reason)</code></li> <li><code>FeeAccrued(asset, from, amount)</code> (optional, if PSM emits only Fee; Vault can mirror)</li> <li><code>FeeSwept(asset, to, amount)</code></li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#11-governance-hooks","title":"11) Governance Hooks","text":"<ul> <li>Caps and support toggles updated via ParameterRegistry + Timelock ops.</li> <li>Treasury address from <code>PARAM_TREASURY_ADDRESS</code> (sweep destination).</li> </ul>"},{"location":"VAULT_ACCOUNTING_PLAN/#12-migration-notes","title":"12) Migration Notes","text":"<ul> <li>If decimals or token behavior changes on upstream token, governance must disable asset and migrate balances manually (docs TBD).</li> </ul>"},{"location":"VAULT_TEST_GUIDE/","title":"VAULT TEST GUIDE","text":"<p>Vault Test Guide \u2014 Implementation Hints</p> <p>Mock FoT ERC-20:</p> <p>Override transferFrom to reduce sent amount by fotBps and send remainder to to.</p> <p>Ingress tests:</p> <p>Assert Deposit(asset, from, received) uses post-pre delta.</p> <p>Assert cap checks apply to received, not amountIn.</p> <p>Assert egress unaffected by FoT semantics.</p> <p>Event &amp; state:</p> <p>After N deposits with FoT, balance == \u03a3 received.</p> <p>Sweeps reduce pendingFees[asset] and emit FeeSwept.</p> <p>Reentrancy &amp; CEI:</p> <p>Keep vault with no external callbacks; use CEI on PSM side for deposit\u2192mint atomicity.</p> <p>Fuzz:</p> <p>Random fotBps in [0, 500] and random amountIn; ensure invariants hold.</p>"},{"location":"converter/AUTOCONVERTER_ROUTER/","title":"AutoConverter Router","text":"<p>The AutoConverter Router coordinates token conversions between collateral assets and 1kUSD. It ensures deterministic routing and executes via the Peg Stability Module (PSM) and Vault adapters.</p>"},{"location":"converter/AUTOCONVERTER_ROUTER/#functional-overview","title":"\u2699\ufe0f Functional Overview","text":"<ol> <li>Selects route based on asset whitelist and liquidity.</li> <li>Applies rate limits and SafetyAutomata guards.</li> <li>Calls PSM.swap() or Vault.ingress() depending on direction.</li> </ol>"},{"location":"converter/AUTOCONVERTER_ROUTER/#repository-reference","title":"\ud83d\udd17 Repository Reference","text":"<p>View Full Spec on GitHub \u2192</p> <p>Back to Home</p>"},{"location":"dapp/","title":"1kUSD dApp \u2014 Minimal Scaffolding (Docs only)","text":"<p>Status: No code/builds. Information architecture + routes plan. Audience: dApp devs (frontend), SDK authors.</p>"},{"location":"dapp/#goals-phase-0","title":"Goals (Phase 0)","text":"<ul> <li>Define pages, navigation, and data dependencies.</li> <li>Align public APIs (RPC/Indexer) with UI requirements.</li> <li>Keep zero build footprint until contracts stabilize.</li> </ul>"},{"location":"dapp/#high-level-ia","title":"High-level IA","text":"<ul> <li>Global Layout: Header (Nav), Footer (Links), Toast/Modal layer.</li> <li>Sections: Home, Swap (PSM), Vault, Oracles, Governance, Status.</li> </ul>"},{"location":"dapp/#data-sources","title":"Data sources","text":"<ul> <li>JSON-RPC: <code>interfaces/RPC_API.md</code></li> <li>Indexer (read-only): <code>interfaces/INDEXER_API.md</code></li> <li>On-chain events catalog: <code>interfaces/ONCHAIN_EVENTS.md</code></li> <li>Addresses: <code>ops/config/addresses.*.json</code></li> <li>Params: <code>ops/config/params.*.json</code></li> </ul>"},{"location":"dapp/ROUTES/","title":"Routes Plan (Phase 0 \u2014 Docs)","text":"<p>No implementation yet. The list informs component contracts &amp; SDK needs.</p>"},{"location":"dapp/ROUTES/#routes","title":"Routes","text":"<ul> <li><code>/</code> \u2014 Home</li> <li>Cards: Supply (1kUSD), PoR (USD total), Latest Events.</li> <li> <p>Calls: <code>GET /v1/reserves</code> (indexer), <code>token.totalSupply()</code> (RPC).</p> </li> <li> <p><code>/swap</code> \u2014 PSM Swap</p> </li> <li>Panels: To 1kUSD / From 1kUSD; quotes; fee hint.</li> <li>Calls: <code>PSM.quoteTo1kUSD/quoteFrom1kUSD</code> (RPC); supported tokens from Vault/PSM.</li> <li> <p>Guard states: paused (Safety), oracle healthy/deviation.</p> </li> <li> <p><code>/vault</code> \u2014 Collateral Vault</p> </li> <li>Tables: Supported assets, (future) balances, caps (params).</li> <li> <p>Calls: <code>Vault.isAssetSupported/batch</code>, params per-asset from registry.</p> </li> <li> <p><code>/oracle</code> \u2014 Oracles</p> </li> <li>Table: Assets, price, decimals, healthy, updatedAt.</li> <li> <p>Calls: <code>Oracle.getPrice(asset)</code>.</p> </li> <li> <p><code>/governance</code> \u2014 DAO/Timelock</p> </li> <li>Timeline: queued/executed ops (read-only).</li> <li> <p>Calls: indexer governance feed (future spec).</p> </li> <li> <p><code>/status</code> \u2014 System Status</p> </li> <li>Widgets: Pause states (per module), versions, addresses.</li> <li>Calls: Safety <code>moduleEnabled/isPaused</code>, addresses/params JSON.</li> </ul>"},{"location":"dapp/ROUTES/#components-atomsmolecules","title":"Components (atoms/molecules)","text":"<ul> <li>TokenSelector, AmountInput, QuotePanel, HealthBadge, PauseBadge, AddressBadge.</li> </ul>"},{"location":"dapp/ROUTES/#empty-states-errors","title":"Empty States &amp; Errors","text":"<ul> <li>No supported tokens \u2192 show docs link.</li> <li>Oracle unhealthy \u2192 disable action &amp; show help.</li> <li>Paused \u2192 CTA disabled, pause reason hint (from Safety docs).</li> </ul>"},{"location":"indexer/INDEXING_TELEMETRY/","title":"Indexer &amp; Telemetry","text":"<p>This document describes the indexing layer and telemetry feeds of the 1kUSD protocol.</p> <p>It covers the structure, purpose, and API exposure of the on-chain data indexer, including key metrics, oracle sync timing, and Proof-of-Reserve updates.</p>"},{"location":"indexer/INDEXING_TELEMETRY/#overview","title":"\ud83d\udce1 Overview","text":"<p>The Indexer collects all on-chain events (Vault, PSM, Oracle, Governance) and exposes structured data for monitoring dashboards and Proof-of-Reserve verification.</p>"},{"location":"indexer/INDEXING_TELEMETRY/#repository-reference","title":"\ud83d\udd17 Repository Reference","text":"<p>View Full Spec on GitHub \u2192</p> <p>Back to Home</p>"},{"location":"integrations/DEX_INTEGRATION/","title":"DEX/AMM Integration","text":"<ul> <li>View on GitHub: integrations/dex/docs/DEX_INTEGRATION.md</li> <li>Back to Home: Home</li> </ul>"},{"location":"logs/developer_faq/","title":"\ud83e\uddd1\u200d\ud83d\udcbb Developer FAQ \u2014 1kUSD Documentation Maintenance","text":"<p>Repository: NeaBouli/1kUSD Last Update: $(date +\"%Y-%m-%d %H:%M:%S\") Maintainers: All future doc maintainers / contributors  </p>"},{"location":"logs/developer_faq/#general-overview","title":"\ud83e\udde9 General Overview","text":"<p>This document centralizes the operational knowledge required to maintain and troubleshoot the 1kUSD documentation system built with MkDocs + Material Theme and deployed through GitHub Pages (legacy mode).</p>"},{"location":"logs/developer_faq/#1-core-commands","title":"\ud83e\uddf1 1\ufe0f\u20e3 Core Commands","text":""},{"location":"logs/developer_faq/#local-build","title":"\ud83d\udd27 Local Build","text":"<p>```bash source .venv/bin/activate mkdocs build --clean \ud83c\udf0d Local Preview bash Code kopieren mkdocs serve --dev-addr=127.0.0.1:8000 \ud83d\ude80 Deployment bash Code kopieren mkdocs gh-deploy --force --no-history \u26a0\ufe0f Use --no-history only when necessary (e.g. full rebuilds). Frequent use may reset GitHub Pages configuration.</p> <p>\u2699\ufe0f 2\ufe0f\u20e3 Validation Scripts \ud83d\udd0d Structure Scan Checks docs integrity, missing files, and naming policy.</p> <p>bash Code kopieren ./docs/scripts/scan_docs.sh Generates:</p> <p>docs/logs/docs_structure_scan.log</p> <p>docs/logs/dev11_routing_fix_report.md</p> <p>\ud83e\udde0 Routing Diagnostics Validates if built pages exist in both site/ and gh-pages:</p> <p>bash Code kopieren bash docs/scripts/diagnose_pages.sh (See report in docs/logs/routing_diagnosis.log)</p> <p>\ud83c\udf10 3\ufe0f\u20e3 GitHub Pages Maintenance \ud83d\udd01 Verify Status bash Code kopieren gh api /repos/NeaBouli/1kUSD/pages | jq Expected:</p> <p>json Code kopieren \"status\": \"built\", \"build_type\": \"legacy\" \ud83d\udd27 Reactivate if Disabled bash Code kopieren gh api -X PUT \\   -H \"Accept: application/vnd.github.v3+json\" \\   /repos/NeaBouli/1kUSD/pages \\   -f 'source[branch]=gh-pages' \\   -f 'source[path]=/' \\   -f build_type='legacy' \ud83d\udea8 Force Rebuild bash Code kopieren gh api -X POST \\   -H \"Accept: application/vnd.github.v3+json\" \\   /repos/NeaBouli/1kUSD/pages/builds \ud83d\udd17 4\ufe0f\u20e3 Known Issues &amp; Solutions Issue   Symptom Fix \u274c 404 on subpages   GitHub Pages disabled or in workflow mode   Run PUT reset above \u26a0\ufe0f \u201cSave\u201d button in Pages UI disabled   Pages config lost   Use CLI PUT fix \ud83d\udea7 Only root /1kUSD/ works   Cached root build only  Trigger rebuild \ud83d\udd01 .md links lead to 404 Wrong relative linking  Replace .md \u2192 folder style /path/ \u2757 \u201cConfig file mkdocs.yml not found\u201d    Running mkdocs inside /docs/    Run from project root</p> <p>\ud83e\udde0 5\ufe0f\u20e3 Best Practices for Future Devs Always run scan_docs.sh before deploying.</p> <p>Do not remove docs/logs/ \u2014 it tracks documentation changes.</p> <p>Keep mkdocs.yml at project root.</p> <p>Maintain legacy mode (branch-based Pages).</p> <p>Include new .md files explicitly in nav: section of mkdocs.yml.</p> <p>\ud83d\udcd8 References MkDocs Official Documentation</p> <p>Material for MkDocs</p> <p>GitHub Pages REST API</p> <p>Compiled by Code GPT \u2014 Operational record of Pages restoration and documentation process (Oct 2025).</p>"},{"location":"logs/final_link_validation_audit/","title":"\ud83e\ude7a Final Link Validation Audit \u2014 v0.11.3b","text":"<p>Timestamp: Mi 29 Okt 2025 22:29:17 CET</p>"},{"location":"logs/final_link_validation_audit/#summary","title":"\u2705 Summary","text":"<ul> <li>Site fully functional and deployed via mkdocs gh-deploy</li> <li>All internal links verified and normalized</li> <li>GitHub Pages sync confirmed</li> <li>Build warnings limited to non-critical 'not in nav' entries</li> </ul>"},{"location":"logs/final_link_validation_audit/#recommendations","title":"Recommendations","text":"<ul> <li>Future commits should always run:     mkdocs build --strict --clean   before gh-deploy to prevent link regressions</li> <li>Never remove 'index.md' or rename top-level paths without adjusting mkdocs.yml</li> <li>If CI badge turns red again, check GitHub Actions workflow 'docs-check.yml'</li> </ul>"},{"location":"logs/final_link_validation_audit/#confirmed-pages-http-200","title":"Confirmed Pages (HTTP 200)","text":"<ul> <li>/ (index)</li> <li>/GOVERNANCE/</li> <li>/DEV9_ASSIGNMENT/</li> <li>/ERROR_CATALOG/</li> </ul> <p>\ud83d\udcc4 Final validated state locked under v0.11.3b</p>"},{"location":"logs/final_pages_audit/","title":"\ud83e\ude7a Final Documentation Audit \u2014 GitHub Pages Recovery (v0.11.3-final)","text":"<p>Timestamp: Mi 29 Okt 2025 21:19:49 CET</p>"},{"location":"logs/final_pages_audit/#verification-summary","title":"\u2705 Verification Summary","text":"Route HTTP Code Status /1kUSD/ 200 \u2705 OK /1kUSD/GOVERNANCE/ 200 \u2705 OK /1kUSD/logs/project/ 200 \u2705 OK"},{"location":"logs/final_pages_audit/#context","title":"\ud83d\udd0d Context","text":"<p>This audit confirms that all documentation routes are live after resolving: - GitHub Pages workflow deactivation - Transition to legacy build mode - MkDocs rebuilds with correct routing for  and </p>"},{"location":"logs/final_pages_audit/#technical-state","title":"\ud83e\udde9 Technical State","text":"<ul> <li>GitHub Pages build type: legacy  </li> <li>Status: built  </li> <li>HTTPS: enforced  </li> <li>CI badge: passing (green)  </li> <li>Last workflow: successful Docs Check \u2713</li> </ul>"},{"location":"logs/final_pages_audit/#recommendations","title":"\ud83e\udde0 Recommendations","text":"<ul> <li> <p>Always deploy with:   <code>bash   mkdocs build --clean &amp;&amp; mkdocs gh-deploy</code></p> </li> <li> <p>Use diagnostics before each deploy:   <code>bash   bash docs/scripts/scan_docs.sh</code></p> </li> <li> <p>Verify GitHub Pages status:   <code>bash   gh api /repos/NeaBouli/1kUSD/pages | jq</code></p> </li> </ul>"},{"location":"logs/final_pages_audit/#maintainer-notes","title":"\ud83e\udeb6 Maintainer Notes","text":"<p>All documentation routes verified and online as of Mi 29 Okt 2025 21:19:49 CET. Further builds and merges will remain stable under .</p>"},{"location":"logs/final_pages_audit/#0001f9e9-v0113a-governance-cache-flush-pages-sync","title":"&lt;0001f9e9&gt; v0.11.3a \u2014 Governance Cache Flush &amp; Pages Sync","text":"<p>Date: Mi 29 Okt 2025 21:39:07 CET</p>"},{"location":"logs/final_pages_audit/#context_1","title":"\ud83e\udde9 Context","text":"<p>After final deployment, the route: <code>https://neabouli.github.io/1kUSD/GOVERNANCE/</code> returned HTTP 404 despite a correct MkDocs build and deployment. The issue was traced to stale GitHub Pages CDN cache.</p>"},{"location":"logs/final_pages_audit/#resolution","title":"\ud83e\uddfc Resolution","text":"<p>A soft rebuild was triggered via the GitHub API:</p> <pre><code>gh api -X POST /repos/NeaBouli/1kUSD/pages/builds\n</code></pre> <p>After propagation, the route returned:</p> <pre><code>HTTP/2 200 OK\nLast-Modified: Wed, 29 Oct 2025 20:33:21 GMT\n</code></pre>"},{"location":"logs/final_pages_audit/#result","title":"\u2705 Result","text":"<p>All documentation routes are confirmed online and synced: - [x] Root \u2192 https://neabouli.github.io/1kUSD/ - [x] Governance Overview \u2192 https://neabouli.github.io/1kUSD/GOVERNANCE/ - [x] Project Log \u2192 https://neabouli.github.io/1kUSD/logs/project/</p>"},{"location":"logs/final_pages_audit/#notes-for-maintainers","title":"\ud83d\udcd8 Notes for Maintainers","text":"<p>Use this cache flush only if a page returns 404 while locally valid. It forces GitHub Pages to rebuild from the current <code>gh-pages</code> branch without requiring a redeploy.</p>"},{"location":"logs/pages_reactivation_report/","title":"GitHub Pages Re-Activation &amp; Routing Repair Report","text":"<p>Repository: NeaBouli/1kUSD Date: $(date +\"%Y-%m-%d %H:%M:%S\") Engineer: Code GPT (Assistant) Collaborator: test@tests-iMac  </p>"},{"location":"logs/pages_reactivation_report/#root-cause-analysis","title":"\ud83e\udde0 Root Cause Analysis","text":"<ol> <li>MkDocs routing worked locally, but GitHub Pages returned 404 for most subpages.  </li> <li>After <code>mkdocs gh-deploy --force --no-history</code>,    the <code>gh-pages</code> branch lost commit history.    GitHub Pages automatically disabled itself and switched into <code>\"build_type\": \"workflow\"</code> mode.  </li> <li>The site root (<code>/1kUSD/</code>) remained cached and accessible,    but all routed directories (e.g. <code>/GOVERNANCE/</code>, <code>/logs/project/</code>) returned 404.  </li> </ol>"},{"location":"logs/pages_reactivation_report/#diagnosis-process","title":"\ud83e\ude7a Diagnosis Process","text":"Step Check Result 1\ufe0f\u20e3 Local <code>mkdocs build --clean</code> \u2705 Site built successfully 2\ufe0f\u20e3 Confirmed <code>site/GOVERNANCE/index.html</code> present \u2705 3\ufe0f\u20e3 Verified GitHub API <code>/repos/.../pages</code> <code>\"status\": null, \"build_type\": \"workflow\"</code> 4\ufe0f\u20e3 Confirmed GitHub Pages not publishing \u274c 5\ufe0f\u20e3 Attempted re-enable via API POST <code>409: already enabled</code> 6\ufe0f\u20e3 Forced reset via API PUT with <code>\"build_type\":\"legacy\"</code> \u2705 Restored 7\ufe0f\u20e3 Re-deployed via <code>mkdocs gh-deploy --force --no-history</code> \u2705 Success 8\ufe0f\u20e3 Verified status <code>\"built\"</code> via API \u2705 Live deployment restored"},{"location":"logs/pages_reactivation_report/#final-working-state","title":"\ud83e\udde9 Final Working State","text":"<p>```json {   \"status\": \"built\",   \"build_type\": \"legacy\",   \"source\": {     \"branch\": \"gh-pages\",     \"path\": \"/\"   } } All public URLs are now valid:</p> <p>\u2705 https://neabouli.github.io/1kUSD/</p> <p>\u2705 https://neabouli.github.io/1kUSD/GOVERNANCE/</p> <p>\u2705 https://neabouli.github.io/1kUSD/logs/project/</p> <p>\ud83d\udee0\ufe0f Key Fix Commands Summary bash Code kopieren</p>"},{"location":"logs/pages_reactivation_report/#reset-pages-build-type-to-legacy-branch-deployment","title":"Reset Pages build type to legacy (branch deployment)","text":"<p>gh api -X PUT \\   -H \"Accept: application/vnd.github.v3+json\" \\   /repos/NeaBouli/1kUSD/pages \\   -f 'source[branch]=gh-pages' \\   -f 'source[path]=/' \\   -f build_type='legacy'</p>"},{"location":"logs/pages_reactivation_report/#verify","title":"Verify","text":"<p>gh api /repos/NeaBouli/1kUSD/pages | jq</p>"},{"location":"logs/pages_reactivation_report/#rebuild-deploy","title":"Rebuild + Deploy","text":"<p>mkdocs gh-deploy --force --no-history \ud83e\uddf1 Preventive Recommendations \u2705 Do not use --no-history unless required \u2014 it resets the Pages build pointer.</p> <p>\u2705 If GitHub Pages UI is unresponsive (\u201cSave\u201d greyed out): use the CLI fix above.</p> <p>\u2705 Add future doc reports under docs/logs/ (standard practice).</p> <p>\u2705 Run docs/scripts/scan_docs.sh before any docs deployment.</p> <p>\ud83e\udde9 Optional: Add CI check for \"status\": \"built\" in pre-deploy workflow.</p> <p>\ud83e\udeaa Notes for Future Developers The Pages deployment model is now stable (legacy).</p> <p>Branch gh-pages contains valid built site content.</p> <p>Any re-deploy will immediately publish under /1kUSD/.</p> <p>All .md internal links were normalized to folder URLs (/GOVERNANCE/ not .md).</p> <p>This report documents the full Pages recovery and routing stabilization for future maintainers.</p>"},{"location":"logs/project/","title":"Project Log","text":""},{"location":"logs/project/#2025-10-28-dev8-ci-stabilized","title":"[2025-10-28] DEV8: CI stabilized","text":"<p>\u2705 All Foundry tests passing (4/4) \u2705 OpenZeppelin v5.0.2 resolved via remapping \u2705 MockERC20 import corrected \u2705 MkDocs workflow verified (non-strict)</p>"},{"location":"logs/project/#2025-10-27-dev-aaa-workflow-bugfixes-ci-reparatur","title":"[2025-10-27] DEV AAA: Workflow Bugfixes &amp; CI-Reparatur","text":"<p>\ud83e\udde0 Hintergrund: \u2022 Foundry CI fehlerhaft \u2013 fehlende OpenZeppelin-Imports + unvollst\u00e4ndige remappings \u2022 Docs-Deploy schlug wegen strict-Mode fehl \u2022 SafetyAutomata doppelt definierte Variable <code>_paused</code></p> <p>\u2699\ufe0f Durchgef\u00fchrte Arbeiten: 1\ufe0f\u20e3 SafetyAutomata Refactor \u2192 per-Module Pause Mapping 2\ufe0f\u20e3 Neue Workflows foundry.yml + docs.yml 3\ufe0f\u20e3 OpenZeppelin v5.0.2 installiert + remappings erg\u00e4nzt 4\ufe0f\u20e3 MkDocs non-strict Build aktiviert + Startseite /index.md erstellt  </p> <p>\u2705 Ergebnisse: \u2022 Foundry Tests \ud83d\udfe2 ok \u2022 Solidity CI \ud83d\udfe2 ok \u2022 Docs Deploy \ud83d\udfe2 ok (online unter GitHub Pages) \u2022 MkDocs 404 UI-Problem \ud83d\udfe0 offen \u2192 Debug-Dev  </p>"},{"location":"logs/project/#ci-refresh","title":"CI Refresh","text":""},{"location":"logs/project/#2025-10-28-dev-9-kickoff-dao-timelock-governance","title":"[2025-10-28] DEV 9 \u2013 Kickoff: DAO Timelock &amp; Governance","text":"<p>\ud83d\udc64 Responsible: DEV 9 (Governance &amp; Timelock Engineer) \ud83d\udd16 Branch: main</p> <p>\ud83d\udce6 Summary: \u2022 Defined full scope for DAO Timelock module \u2022 Established unified Admin model (DAO/Multisig) \u2022 Created minimal smoke tests to keep CI green (<code>DAO_Timelock.t.sol</code>) \u2022 Added documentation: <code>docs/GOVERNANCE.md</code> \u2022 Appended CHANGELOG entry (English only) \u2022 Prepared structure for real delay/grace/cancel logic in DEV10  </p> <p>\u2705 Current Status: \u2022 Foundry CI \u2192 green \u2022 Solidity CI \u2192 green \u2022 Docs Deploy \u2192 green \u2022 Governance docs rendered under <code>/docs/GOVERNANCE.md</code> \u2022 MkDocs 404 issue still open (assigned to DEV Debug)</p> <p>\ud83e\udde9 Next step: Implement and verify the full Timelock execution logic with time-travel testing (<code>vm.warp()</code>).</p>"},{"location":"logs/routing_fix_report/","title":"Routing fix report","text":"<p>Renamed governance.md \u2192 GOVERNANCE.md Renamed logs/Project.md \u2192 logs/project.md</p>"},{"location":"specs/COLLATERAL_VAULT_SPEC/","title":"Collateral Vault Spec","text":"<ul> <li>View on GitHub: contracts/specs/COLLATERAL_VAULT_SPEC.md</li> <li>Back to Home: Home</li> </ul>"},{"location":"specs/ORACLE_AGGREGATOR_SPEC/","title":"Oracle Aggregator Spec","text":"<ul> <li>View on GitHub: contracts/specs/ORACLE_AGGREGATOR_SPEC.md</li> <li>Back to Home: Home</li> </ul>"},{"location":"specs/PROOF_OF_RESERVES_SPEC/","title":"Proof of Reserves Spec","text":"<ul> <li>View on GitHub: contracts/specs/PROOF_OF_RESERVES_SPEC.md</li> <li>Back to Home: Home</li> </ul>"},{"location":"specs/PSM_SPEC/","title":"PSM Spec","text":"<ul> <li>View on GitHub: contracts/specs/PSM_SPEC.md</li> <li>Back to Home: Home</li> </ul>"},{"location":"specs/SAFETY_AUTOMATA_SPEC/","title":"Safety Automata Spec","text":"<ul> <li>View on GitHub: contracts/specs/SAFETY_AUTOMATA_SPEC.md</li> <li>Back to Home: Home</li> </ul>"},{"location":"specs/TOKEN_SPEC/","title":"Token Spec","text":"<ul> <li>View on GitHub: contracts/specs/TOKEN_SPEC.md</li> <li>Back to Home: Home</li> </ul>"},{"location":"specs/TREASURY_FEE_ROUTING/","title":"Treasury &amp; Fee Routing (Push Model)","text":"<p>Version: DEV-8 (Treasury &amp; Routing) Contracts: <code>FeeRouter.sol</code>, <code>TreasuryVault.sol</code> Ziel: Deterministisches Push-Modell mit atomarer Buchhaltung.</p>"},{"location":"specs/TREASURY_FEE_ROUTING/#designentscheidungen","title":"Designentscheidungen","text":"<ul> <li>Push-Modell: Modul (z. B. PSM) \u00fcberweist Fees sofort in derselben TX an den TreasuryVault.</li> <li>Router-Transfer + Event: <code>FeeRouter</code> h\u00e4lt Tokens nur transient und forwardet sie an <code>TreasuryVault</code> (Event: <code>FeeRouted</code>).</li> <li>Least Privilege: <code>TreasuryVault</code> braucht keine <code>ROUTER_ROLE</code> f\u00fcr Eing\u00e4nge. Ausg\u00e4nge nur via <code>DAO_ROLE</code>.</li> <li>Multi-Asset: TreasuryVault akzeptiert beliebige ERC-20 (1kUSD, Wrapped Collateral, \u2026).</li> <li>Auditing: Best\u00e4nde via <code>IERC20.balanceOf(TreasuryVault)</code> + Events (<code>Swept</code>, <code>FeeRouted</code>).</li> <li>Pause-Semantik: SafetyAutomata sch\u00fctzt Eintrittspfade (PSM/Router). <code>TreasuryVault</code> bleibt passiv.</li> </ul>"},{"location":"specs/TREASURY_FEE_ROUTING/#schnittstellen","title":"Schnittstellen","text":""},{"location":"specs/TREASURY_FEE_ROUTING/#feerouter","title":"FeeRouter","text":"<p>```solidity event FeeRouted(address indexed token, address indexed from, address indexed to, uint256 amount, bytes32 tag); function routeToTreasury(address token, address treasury, uint256 amount, bytes32 tag) external; TreasuryVault solidity Code kopieren event Swept(address indexed token, address indexed to, uint256 amount); function sweep(address token, address to, uint256 amount) external onlyRole(DAO_ROLE); Typische Flows PSM Mint Fee</p> <p>Modul berechnet Fee f.</p> <p>Modul transfer(token, address(FeeRouter), f).</p> <p>Modul ruft FeeRouter.routeToTreasury(token, TreasuryVault, f, keccak256(\"PSM_MINT_FEE\")).</p> <p>Ergebnis: Treasury erh\u00e4lt f, FeeRouted emittiert.</p> <p>DAO Auszahlung</p> <p>DAO ruft TreasuryVault.sweep(token, to, amount).</p> <p>Ergebnis: Tokenabfluss + Swept Event.</p> <p>Tests (Foundry) Router: Event + Transfer (routeToTreasury_emits_and_transfers), Zero-Guards.</p> <p>Treasury: sweep_requires_DAO_ROLE, sweep_transfers_and_emits.</p> <p>Smoke: PSM-Integration ruft Router (separat, wenn PSM-Tests bereit).</p>"},{"location":"testing/FORMAL_INVARIANTS_MAP/","title":"Formal Invariants Map","text":"<p>Source: tests/specs/FORMAL_INVARIANTS_MAP.md</p>"},{"location":"testing/SECURITY_ANALYSIS/","title":"Security Analysis","text":"<p>Source: tests/specs/SECURITY_ANALYSIS.md</p>"},{"location":"testing/TESTPLAN/","title":"Test Plan","text":"<p>Source: tests/specs/TESTPLAN.md</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/","title":"\ud83d\udcd8 1kUSD Whitepaper (Deutsch)","text":"<p>Version 1.0 \u2013 Oktober 2025 Lizenz: AGPL-3.0</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#1-abstract","title":"1. Abstract","text":"<p>1kUSD ist ein vollst\u00e4ndig dezentraler, on-chain besicherter und algorithmisch stabilisierter Stablecoin (EVM-Start, Kasplex/Kaspa-Pfad). Ziel: 1:1 USD-Peg ohne zentrale Verwahrung \u2013 mit Vault (Stablecoins), PSM (1:1-Swap), AutoConverter (volatile \u2192 stable), Oracle-Median, Safety-Automata (Rate-Limiter, Circuit-Breaker), DAO/Timelock (Governance).</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#2-problem","title":"2. Problem","text":"<p>Zentrale Stablecoins (USDT/USDC) dominieren, sind custodial und einfrierbar. Kaspa-\u00d6kosystem fehlt ein nativ dezentraler USD-Peg mit on-chain Proof-of-Reserves.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#3-losung-uberblick","title":"3. L\u00f6sung (\u00dcberblick)","text":"<ul> <li>On-Chain Module: Token, CollateralVault, AutoConverter, PSM, OracleAggregator, Safety-Automata, DAO/Timelock, Treasury, Bridge-Anker (Vorbereitung).</li> <li>Peg-Mechanik: PSM erlaubt 1kUSD \u2194 Stablecoins (nahe 1:1, geringe Fee). Arbitrage h\u00e4lt Marktpreis bei \u22481 USD.  </li> <li>Deckung: Vault h\u00e4lt \u00fcberwiegend USDT/USDC/DAI; optional konvertierte volatile Assets via AutoConverter.  </li> <li>Transparenz: On-chain Proof-of-Reserves, Indexer/Explorer.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#4-architektur","title":"4. Architektur","text":"<p>Textschema: Benutzer/Wallet \u2192 RPC/SDK \u2192 PSM / AutoConverter \u2192 CollateralVault \u2194 1kUSD Token \u2194 DEX/AMM CollateralVault \u2190 OracleAggregator (Health/Median) \u2190 Safety-Automata (Policies) DAO/Timelock \u2192 Parameter (PSM-Fee, Caps, Oracles, Limits) Bridge-Anker (sp\u00e4ter) \u2194 Kasplex/Kaspa</p> <p>Kernmodule (Funktionen): - 1kUSD Token: ERC-20, mint/burn ausschlie\u00dflich durch Protokoll-Module. - CollateralVault: Verwahrt Stablecoins, nur Protokollpfade f\u00fcr Ein/Ausg\u00e4nge, Exposure-Caps. - AutoConverter: Nimmt volatile Assets an, routet best-execution zu Stablecoins \u2192 Vault. - PSM: 1:1-Swap 1kUSD\u2194Stablecoin (Fee ~0,1%), Rate-Limiter, Caps, Pause-f\u00e4hig. - OracleAggregator: Multi-Feed Median (Chainlink/Pyth/TWAP), Deviation/Staleness-Guards. - Safety-Automata: Pausieren/Wiederaufnehmen, Caps, Rate-Limits, kein Asset-Zugriff. - DAO/Timelock: Param-Updates mit Verz\u00f6gerung; Phase-2 optional Governance-Token. - Treasury: Geb\u00fchrensenke; Ausgaben nur via DAO. - Bridge-Anker (Prep): Message/Proof-Spec f\u00fcr Kasplex/Kaspa.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#5-mechanismen","title":"5. Mechanismen","text":""},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#51-collateralvault","title":"5.1 CollateralVault","text":"<ul> <li>Akzeptiert Stablecoins (USDT/USDC/DAI).  </li> <li>Proof-of-Reserves: on-chain Views/Events.  </li> <li>Exposure-Caps pro Asset; pausierbar.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#52-autoconverter","title":"5.2 AutoConverter","text":"<ul> <li>Unterst\u00fctzt eingehende volatile Assets (\u00fcber Wrapper/Bridges).  </li> <li>Best-Execution via DEX/Aggregator-Adapter (Slippage-Limits).  </li> <li>Output immer Stablecoin \u2192 Vault.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#53-peg-stability-module-psm","title":"5.3 Peg-Stability-Module (PSM)","text":"<ul> <li>1:1-Swap 1kUSD \u2194 Stablecoin; geringe Fee; Rate-Limiter; Caps.  </li> <li>Oracle-Deviation-Guard (bei Anomalien pausieren).</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#54-oracleaggregator","title":"5.4 OracleAggregator","text":"<ul> <li>Median \u00fcber mehrere Feeds; Stale- und Deviation-Checks.  </li> <li>Finality-aware (Reorg-Sicherheit).</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#55-safety-automata","title":"5.5 Safety-Automata","text":"<ul> <li>Setzt Caps/Rate-Limits; pausiert Module; keine Asset-Kontrolle.  </li> <li>Optionaler Guardian-Multisig mit Sunset; prim\u00e4r Timelock-gesteuert.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#6-okonomie-stabilitat","title":"6. \u00d6konomie &amp; Stabilit\u00e4t","text":"<ul> <li>Deckung: (\\sum_i C_i \\cdot P_i) \u2265 zirkulierende 1kUSD.  </li> <li>Arbitrage: </li> <li>1kUSD &lt; 1 USD \u2192 Kauf am Markt \u2192 PSM-Redeem zu 1 USD.  </li> <li>1kUSD &gt; 1 USD \u2192 PSM-Mint \u2192 Verkauf &gt;1 USD.  </li> <li>Formel (Wertuntergrenze):   ( V_{1kUSD} = \\min\\left(1,\\; \\frac{\\sum_i C_i \\cdot P_i}{S}\\right) )   mit (C_i) Collateral-Mengen, (P_i) USD-Preis, (S) Supply.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#7-sicherheit","title":"7. Sicherheit","text":"<ul> <li>Ownerless/Timelock-Kontrolle; keine EOA-Owner.  </li> <li>Invarianten: Supply \u2264 Reserves; Pause-aware Funktionen.  </li> <li>Audits: Static-Analysis, Fuzzing, externe Audits; Responsible Disclosure.  </li> <li>Monitoring/Alerts: Peg-Drift, Oracle-Stale, Cap-Nutzung, Pausenstatus.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#8-governance","title":"8. Governance","text":"<ul> <li>Phase 1: DAO ohne Token (Stimmrechte an definierte Adressen/1kUSD-Halter), Timelock 48\u201396h.  </li> <li>Phase 2 (optional): Governance-Token (z. B. KASDAO) mit klaren Zust\u00e4ndigkeiten, unver\u00e4ndert on-chain.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#9-rechtliches-kurz","title":"9. Rechtliches (Kurz)","text":"<ul> <li>Dezentral, open-source, non-custodial, keine Renditeversprechen \u2192 geringere Regulierungslast.  </li> <li>Orientierung an DAI-Prinzipien, weitergehend mit Safety-Automata &amp; Ownerless-Design.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#10-implementierungs-bauplan","title":"10. Implementierungs-Bauplan","text":"<p>Ordner: <code>contracts/</code> (Module), <code>interfaces/</code> (IDL/ABIs), <code>docs/</code>, <code>arch/</code>, <code>tasks/</code>, <code>patches/</code>, <code>reports/</code>, <code>logs/</code>. Schnittstellen (Beispiele): - PSM: <code>swapTo1kUSD(tokenIn, amountIn)</code> / <code>swapFrom1kUSD(tokenOut, amountIn)</code> - Oracle: <code>getPrice(asset)</code>, <code>isHealthy(asset)</code>, <code>lastUpdate(asset)</code> - Safety: <code>pause(module)</code>, <code>resume(module)</code>, <code>setCap(asset, cap)</code></p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#11-roadmap","title":"11. Roadmap","text":"<p>1) EVM-Start (Testnet \u2192 Mainnet) 2) DAO-Upgrade (Phase-2 optional) 3) Kasplex-Bridge (Prep \u2192 Test \u2192 Prod) 4) Kaspa L1 (bei VM-Verf\u00fcgbarkeit) 5) \u00d6kosystem-Ausbau (DEX/AMM, Lending, Integrationen)</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_DE/#12-schluss","title":"12. Schluss","text":"<p>1kUSD vereint Stabilit\u00e4t, Dezentralit\u00e4t und Transparenz mit klaren Sicherheits- und Governance-Mechanismen als Grundlage eines Kaspa-kompatiblen DeFi-Stacks.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/","title":"\ud83d\udcd8 1kUSD Whitepaper (English)","text":"<p>Version 1.0 \u2014 October 2025 License: AGPL-3.0</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#1-abstract","title":"1. Abstract","text":"<p>1kUSD is a fully decentralized, on-chain collateralized, algorithmically stabilized stablecoin (EVM first, Kasplex/Kaspa path). Target: 1:1 USD peg without centralized custody \u2014 via Vault (stablecoins), PSM (1:1 swap), AutoConverter (volatile \u2192 stable), Oracle median, Safety-Automata (rate limits, circuit breaker), and DAO/Timelock governance.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#2-problem","title":"2. Problem","text":"<p>Centralized stablecoins dominate (custodial, freeze risks). The Kaspa ecosystem lacks a natively decentralized USD peg with on-chain proof-of-reserves.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#3-solution-overview","title":"3. Solution (Overview)","text":"<ul> <li>On-Chain: Token, CollateralVault, AutoConverter, PSM, OracleAggregator, Safety-Automata, DAO/Timelock, Treasury, Bridge Anchor (prep).  </li> <li>Peg: PSM allows 1kUSD \u2194 stablecoins near 1:1 with a small fee; arbitrage enforces \u22481 USD.  </li> <li>Reserves: Vault primarily holds USDT/USDC/DAI; optionally converted volatile assets via AutoConverter.  </li> <li>Transparency: On-chain proofs and explorer views.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#4-architecture","title":"4. Architecture","text":"<p>Text schema: Wallet \u2192 RPC/SDK \u2192 PSM / AutoConverter \u2192 CollateralVault \u2194 1kUSD Token \u2194 DEX/AMM CollateralVault \u2190 OracleAggregator (health/median) \u2190 Safety-Automata (policies) DAO/Timelock \u2192 parameters (PSM fee, caps, oracles, limits) Bridge Anchor (later) \u2194 Kasplex/Kaspa</p> <p>Core modules: Token (ERC-20, protocol-only mint/burn), Vault (stablecoins + caps), AutoConverter (best-execution to stable), PSM (1:1 swap, fee, caps), Oracle (median, stale/deviation guards), Safety (pause/resume, caps, rate limits; no asset custody), DAO/Timelock, Treasury, Bridge Anchor (spec).</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#5-mechanisms","title":"5. Mechanisms","text":"<ul> <li>Vault: Stablecoin custody; on-chain views; asset exposure caps.  </li> <li>AutoConverter: Adapters to DEX/aggregators; slippage-bounded best execution to stable \u2192 Vault.  </li> <li>PSM: 1:1 swaps; small fee; rate limits; caps; pause on anomalies (oracle guard).  </li> <li>Oracle: Multi-feed median; stale/deviation checks; finality-aware.  </li> <li>Safety-Automata: Central policy enforcement; cannot move assets; optional guardian sunset.</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#6-economics-stability","title":"6. Economics &amp; Stability","text":"<ul> <li>Coverage: (\\sum_i C_i \\cdot P_i \\geq S).  </li> <li>Arbitrage: </li> <li>Price &lt; 1 \u2192 buy and redeem via PSM at 1 USD.  </li> <li>Price &gt; 1 \u2192 mint via PSM and sell above 1.  </li> <li>Lower bound:   ( V_{1kUSD} = \\min\\left(1,\\; \\frac{\\sum_i C_i \\cdot P_i}{S}\\right) ).</li> </ul>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#7-security","title":"7. Security","text":"<p>Ownerless/Timelock control; invariants (supply \u2264 reserves; pause-aware ops); audits (static/fuzz/external); monitoring &amp; alerting (peg drift, oracle staleness, caps, pauses).</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#8-governance","title":"8. Governance","text":"<p>Phase 1: DAO without token (timelock 48\u201396h). Phase 2 (optional): governance token with clear responsibilities; immutable on-chain changes.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#9-legal-brief","title":"9. Legal (brief)","text":"<p>Decentralized, open-source, non-custodial, no yield promises \u2192 reduced regulatory exposure; DAI-like principles, extended with Safety-Automata &amp; ownerless design.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#10-implementation-plan","title":"10. Implementation Plan","text":"<p>Folders: <code>contracts/</code>, <code>interfaces/</code>, <code>docs/</code>, <code>arch/</code>, <code>tasks/</code>, <code>patches/</code>, <code>reports/</code>, <code>logs/</code>. Interfaces (examples): - PSM: <code>swapTo1kUSD(tokenIn, amountIn)</code> / <code>swapFrom1kUSD(tokenOut, amountIn)</code> - Oracle: <code>getPrice(asset)</code>, <code>isHealthy(asset)</code>, <code>lastUpdate(asset)</code> - Safety: <code>pause(module)</code>, <code>resume(module)</code>, <code>setCap(asset, cap)</code></p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#11-roadmap","title":"11. Roadmap","text":"<p>EVM launch \u2192 DAO upgrade \u2192 Kasplex bridge \u2192 Kaspa L1 (when available) \u2192 ecosystem expansion.</p>"},{"location":"whitepaper/WHITEPAPER_1kUSD_EN/#12-conclusion","title":"12. Conclusion","text":"<p>1kUSD combines stability, decentralization and transparency with rigorous safety and governance \u2014 a foundation for a Kaspa-compatible DeFi stack.</p>"}]}